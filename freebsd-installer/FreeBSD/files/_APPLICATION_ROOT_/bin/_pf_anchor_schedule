#!/bin/sh
set -a
_APPLICATION_NAME=freebsd-installer
_beep() {
	if [ -n "$_BEEPING" ]; then
		debug "Another 'beep' is in progress"
		return 1
	fi
	_BEEPING=1
	_do_beep "$@" &
}
_do_beep() {
	if [ -e /dev/speaker ]; then
		printf '%s' "$1" >/dev/speaker
	fi
	unset _BEEPING
}
_sudo_precmd() {
	_beep $_CONF_LOG_SUDO_BEEP_TONE
}
_context_id_is_valid() {
	printf '%s' "$1" | $_CONF_GNU_GREP -Pq '^[a-zA-Z0-9_+-]+$' || error "Context ID *MUST* only contain alphanumeric characters and +-: '^[a-zA-Z0-9_+-]+$' | ($1)"
}
_variable_is_set() {
	env | grep -cq "^$1=.*$"
}
_environment_filter() {
	$_CONF_GNU_GREP -P "(^_CONF_|^_OPTN_|^_INSTALL_|^${_TARGET_APPLICATION_NAME}_)"
}
_environment_dump() {
	[ -z "$_APPLICATION_PIPE_DIR" ] && return
	[ -z "$_ENVIRONMENT_FILE" ] && _ENVIRONMENT_FILE=$_APPLICATION_PIPE_DIR/environment
	mkdir -p $(dirname $_ENVIRONMENT_FILE)
	env | _environment_filter | sort -u | grep -v '^$' | sed -e 's/=/="/' -e 's/$/"/' >>$_ENVIRONMENT_FILE
}
_call() {
	local _function_name=$1
	type $_function_name >/dev/null 2>&1 || {
		debug "${_function_name} does not exist"
		return 255
	}
	[ $# -gt 1 ] && {
		shift
		$_function_name "$@"
		return $?
	}
	$_function_name
}
_() {
	if [ -n "$_EXEC_ATTEMPTS" ]; then
		local attempt=1
		while [ $attempt -le $_EXEC_ATTEMPTS ]; do
			_WARN_ON_ERROR=1 _do_exec "$@" && return
			attempt=$(($attempt + 1))
		done
		error "Failed after $attempt attempts: $*"
	fi
	_do_exec "$@"
}
_do_exec() {
	local _successfulExitStatus=0
	if [ -n "$_SUCCESSFUL_EXIT_STATUS" ]; then
		_successfulExitStatus=$_SUCCESSFUL_EXIT_STATUS
		unset _SUCCESSFUL_EXIT_STATUS
	fi
	info "## $*"
	if [ -z "$_DRY_RUN" ]; then
		if [ -n "$_CMD_LOGFILE" ]; then
			_exec_to_file "$_CMD_LOGFILE" "$@"
		else
			if [ -z "$_LOGFILE" ]; then
				"$@"
			else
				_exec_to_file "$_LOGFILE" "$@"
			fi
		fi
		local _exit_status=$?
		if [ $_exit_status -ne $_successfulExitStatus ]; then
			if [ -n "$_ON_FAILURE" ]; then
				$_ON_FAILURE
				return
			fi
			if [ -z "$_WARN_ON_ERROR" ]; then
				error "Previous cmd failed: $* - $_exit_status"
			else
				unset _WARN_ON_ERROR
				warn "Previous cmd failed: $* - $_exit_status"
				_ENVIRONMENT_FILE=$(_mktemp error) _environment_dump
				return $_exit_status
			fi
		fi
	fi
}
_exec_to_file() {
	local logfile=$1
	shift
	mkdir -p $(dirname $logfile)
	type $_function_name >/dev/null 2>&1 || {
		"$@" >>$logfile 2>>$logfile
		return $?
	}
	"$@"
}
error() {
	if [ $# -ge 2 ]; then
		_EXIT_STATUS=$2
	else
		_EXIT_STATUS=1
	fi
	_EXIT_LOG_LEVEL=4
	_EXIT_STATUS_CODE="ERR"
	_EXIT_COLOR_CODE="$_CONF_LOG_C_ERR"
	_EXIT_MESSAGE="$1 ($_EXIT_STATUS)"
	_EXIT_BEEP=$_CONF_LOG_BEEP_ERR
	_defer _environment_dump
	_defer _log_app_exit
	exit $_EXIT_STATUS
}
_success() {
	_EXIT_STATUS=0
	_EXIT_LOG_LEVEL=1
	_EXIT_STATUS_CODE="SCS"
	_EXIT_COLOR_CODE="$_CONF_LOG_C_SCS"
	_EXIT_MESSAGE="$1"
	_EXIT_BEEP=$_CONF_LOG_BEEP_SCS
	_defer _long_running_cmd
	_defer _log_app_exit
	[ -z "$_EXIT" ] && exit 0
}
_on_exit() {
	[ $_EXIT ] && return 1
	_EXIT=0
	[ -z "$_EXIT_STATUS" ] && _success "completed successfully"
	if [ -n "$_DEFERS" ]; then
		local defer
		for defer in $_DEFERS; do
			_call $defer
		done
		unset _DEFERS
	fi
	return $_EXIT
}
_defer() {
	if [ -n "$_DEFERS" ]; then
		local defer
		for defer in $_DEFERS; do
			[ "$defer" = "$1" ] && {
				debug "not deferring: $1 as it was already deferred"
				return
			}
		done
	fi
	debug "deferring: $1"
	_DEFERS="$1 $_DEFERS"
}
_log_app_exit() {
	[ "$_EXIT_MESSAGE" ] && {
		local current_time=$(date +%s)
		local timeout=$(($_APPLICATION_START_TIME + $_CONF_LOG_BEEP_TIMEOUT))
		[ $current_time -le $timeout ] && unset _EXIT_BEEP
		_print_log $_EXIT_LOG_LEVEL "$_EXIT_STATUS_CODE" "$_EXIT_COLOR_CODE" "$_EXIT_BEEP" "$_EXIT_MESSAGE"
	}
	_log_app exit
	[ -n "$_LOGFILE" ] && [ -n "$_OPTN_LOG_EXIT_CMD" ] && {
		$_OPTN_LOG_EXIT_CMD -file $_LOGFILE
	}
}
_print_help() {
	if [ -e $2 ]; then
		info "$1:"
		cat $2
		printf '\n'
	fi
}
_print_help_and_exit() {
	_print_help 'system-wide options' $_CONF_LIBRARY_PATH/install/help/default
	if [ "$_APPLICATION_NAME" != "install" ]; then
		_print_help $_APPLICATION_NAME $_CONF_LIBRARY_PATH/$_APPLICATION_NAME/help/default
		_print_help "$_APPLICATION_NAME/$_APPLICATION_CMD" $_CONF_LIBRARY_PATH/$_APPLICATION_NAME/help/$_APPLICATION_CMD
	fi
	exit 0
}
_include() {
	local include_file
	for include_file in "$@"; do
		[ -f $HOME/.config/walterjwhite/$include_file ] && . $HOME/.config/walterjwhite/$include_file
	done
}
_init_logging() {
	[ -n "$_LOGFILE" ] && _set_logfile "$_LOGFILE"
	case $_CONF_LOG_LEVEL in
	0)
		local logfile=$(_mktemp debug)
		warn "Writing debug contents to: $logfile"
		_set_logfile "$logfile"
		set -x
		;;
	esac
}
_set_logfile() {
	[ -z "$1" ] && return 1
	_LOGFILE=$1
	mkdir -p $(dirname $1)
	_reset_indent
	[ -n "$_CHILD_LOG" ] || exec 3>&1 4>&2
	exec >>$_LOGFILE 2>&1
	[ -z "$_PRESERVE_LOG" ] && [ -z "$_CHILD_LOG" ] && truncate -s 0 $1 >/dev/null 2>&1
}
warn() {
	_print_log 3 WRN "$_CONF_LOG_C_WRN" "$_CONF_LOG_BEEP_WRN" "$1"
}
info() {
	_print_log 2 INF "$_CONF_LOG_C_INFO" "$_CONF_LOG_BEEP_INFO" "$1"
}
detail() {
	_print_log 2 DTL "$_CONF_LOG_C_DETAIL" "$_CONF_LOG_BEEP_DETAIL" "$1"
}
debug() {
	_print_log 1 DBG "$_CONF_LOG_C_DEBUG" "$_CONF_LOG_BEEP_DEBUG" "($$) $1"
}
_log() {
	:
}
_sed_remove_nonprintable_characters() {
	sed -e 's/[^[:print:]]//g'
}
_print_log() {
	if [ -z "$5" ]; then
		if test ! -t 0; then
			local _line
			cat - | _sed_remove_nonprintable_characters |
				while read _line; do
					_print_log $1 $2 $3 $4 "$_line"
				done
			return
		fi
		return
	fi
	local message="$5"
	[ $1 -lt $_CONF_LOG_LEVEL ] && return
	[ -n "$_LOGGING_CONTEXT" ] && message="$_LOGGING_CONTEXT - $message"
	local _message_date_time=$(date +"$_CONF_LOG_DATE_FORMAT")
	if [ $_BACKGROUNDED ] && [ $_OPTN_INSTALL_BACKGROUND_NOTIFICATION_METHOD ]; then
		$_OPTN_INSTALL_BACKGROUND_NOTIFICATION_METHOD "$2" "$_message" &
	fi
	[ -n "$4" ] && _beep "$4"
	_log_to_file "$2" "$_message_date_time" "${_LOG_INDENT}$message"
	_log_to_console "$3" "$2" "$_message_date_time" "${_LOG_INDENT}$message"
	[ -z "$INTERACTIVE" ] && _syslog "$message"
	return 0
}
_reset_indent() {
	unset _LOG_INDENT
}
_log_to_file() {
	[ -z "$_LOGFILE" ] && return
	if [ $_CONF_LOG_AUDIT -gt 0 ]; then
		printf '%s %s %s\n' "$1" "$2" "$3" >>$_LOGFILE
		return
	fi
	printf '%s\n' "$3" >>$_LOGFILE
}
_log_to_console() {
	local stderr=2
	[ ! -t $stderr ] && stderr=4
	[ ! -t $stderr ] && return
	if [ $_CONF_LOG_AUDIT -gt 0 ]; then
		printf >&$stderr '\033[%s%s \033[0m%s %s\n' "$1" "$2" "$3" "$4"
		return
	fi
	printf >&$stderr '\033[%s%s \033[0m\n' "$1" "$4"
}
_log_app() {
	debug "$_APPLICATION_NAME:$_APPLICATION_CMD - $1 ($$)"
}
_mktemp() {
	local suffix=$1
	[ -n "$suffix" ] && suffix=".$suffix"
	local sudo_prefix
	[ -n "$_SUDO_USER" ] && sudo_prefix=_sudo
	$sudo_prefix mktemp -${_MKTEMP_OPTIONS}t ${_APPLICATION_NAME}.${_APPLICATION_CMD}${suffix}
}
_setup_app_pipe() {
	_APPLICATION_PIPE=$_APPLICATION_CMD_DIR/$$
	_APPLICATION_PIPE_DIR=$(dirname $_APPLICATION_PIPE)
	mkdir -p $_APPLICATION_PIPE_DIR
	mkfifo $_APPLICATION_PIPE
	_defer _cleanup_app_pipe
}
_cleanup_app_pipe() {
	rm -f $_APPLICATION_PIPE
}
_kill_all() {
	_do_kill_all $_APPLICATION_PIPE_DIR
}
_kill_all_group() {
	_do_kill_all $_APPLICATION_CONTEXT_GROUP
}
_do_kill_all() {
	for _EXISTING_APPLICATION_PIPE in $(find $1 -type p -not -name $$); do
		_kill $(basename $_EXISTING_APPLICATION_PIPE)
	done
}
_kill() {
	warn "Killing $1"
	kill -TERM $1
}
_list() {
	_list_pidinfos $_APPLICATION_PIPE_DIR
}
_list_group() {
	_list_pidinfos $_APPLICATION_CONTEXT_GROUP
}
_list_pidinfos() {
	info "Running processes:"
	_EXECUTABLE_NAME_SED_SAFE=$(_sed_safe $0)
	for _EXISTING_APPLICATION_PIPE in $(find $1 -type p -not -name $$); do
		_list_pidinfo
	done
}
_parent_processes_pgrep() {
	pgrep -P $1
}
_is_backgrounded() {
	case $(ps -o stat= -p $$) in
	*+*)
		return 1
		;;
	esac
	return 0
}
_list_pidinfo() {
	_TARGET_PID=$(basename $_EXISTING_APPLICATION_PIPE)
	_TARGET_PS_DTL=$(ps -o command -p $_TARGET_PID | sed 1d | sed -e "s/^.*$_EXECUTABLE_NAME_SED_SAFE/$_EXECUTABLE_NAME_SED_SAFE/")
	info " $_TARGET_PID - $_TARGET_PS_DTL"
}
_interactive_alert_if() {
	_is_interactive_alert_enabled && _interactive_alert "$@"
}
_is_interactive_alert_enabled() {
	grep -cq '^_OPTN_INSTALL_INTERACTIVE_ALERT=1$' $_CONF_APPLICATION_CONFIG_PATH 2>/dev/null
}
_continue_if() {
	_read_if "$1" _PROCEED "$2"
	local proceed="$_PROCEED"
	unset _PROCEED
	if [ -z "$proceed" ]; then
		_DEFAULT=$(printf '%s' $2 | awk -F'/' {'print$1'})
		proceed=$_DEFAULT
	fi
	local proceed=$(printf '%s' "$proceed" | tr '[:lower:]' '[:upper:]')
	if [ $proceed = "N" ]; then
		return 1
	fi
	return 0
}
_read_if() {
	if [ $(env | grep -c "^$2=.*") -eq 1 ]; then
		debug "$2 is already set"
		return 1
	fi
	[ -z "$INTERACTIVE" ] && error "Running in non-interactive mode and user input was requested: $@" 10
	_print_log 9 STDI "$_CONF_LOG_C_STDIN" "$_CONF_LOG_BEEP_STDIN" "$1 $3"
	_interactive_alert_if $1 $3
	read -r $2
}
_syslog() {
	logger -i -t "$_APPLICATION_NAME.$_APPLICATION_CMD" "$1"
}
_sudo() {
	[ $# -eq 0 ] && error 'No arguments were provided to _sudo'
	_require "$_SUDO_CMD" _SUDO_CMD
	_sudo_is_required || {
		"$@"
		return
	}
	[ -n "$INTERACTIVE" ] && {
		$_SUDO_CMD -n ls >/dev/null 2>&1 || _sudo_precmd "$@"
	}
	$_SUDO_CMD $sudo_options "$@"
	unset sudo_options
}
_sudo_is_required() {
	[ -n "$_SUDO_USER" ] && {
		[ "$_SUDO_USER" = "$USER" ] && return 1
		sudo_options="$sudo_options -u $_SUDO_USER"
		return 0
	}
	[ "$USER" = "root" ] && return 1
	return 0
}
_waitee_init() {
	[ -z "$_WAITEE" ] && return
	_setup_app_pipe
	warn "($_APPLICATION_CMD) Please use -w=$$"
	_defer _waitee_done
}
_waitee_done() {
	if [ -n "$_WAITEE" ] && [ -e $_APPLICATION_PIPE ]; then
		info "$0 process completed, notifying ($_EXIT_STATUS)"
		printf '%s\n' "$_EXIT_STATUS" >$_APPLICATION_PIPE
		info "$0 downstream process picked up"
	fi
}
_waiter() {
	[ -z "$_WAITER_PID" ] && return
	_UPSTREAM_APPLICATION_PIPE=$(find $_APPLICATION_CONTEXT_GROUP -type p -name $_WAITER_PID 2>/dev/null | head -1)
	[ -z "$_UPSTREAM_APPLICATION_PIPE" ] && error "$_WAITER_PID not found"
	[ ! -e $_UPSTREAM_APPLICATION_PIPE ] && {
		warn "$_UPSTREAM_APPLICATION_PIPE does not exist, did upstream start?"
		return
	}
	info "Waiting for upstream to complete: $_WAITER_PID"
	while [ 1 ]; do
		if [ ! -e $_UPSTREAM_APPLICATION_PIPE ]; then
			error "Upstream pipe no longer exists"
		fi
		_UPSTREAM_APPLICATION_STATUS=$(_timeout $_CONF_WAIT_INTERVAL "_waiter:upstream" cat $_UPSTREAM_APPLICATION_PIPE 2>/dev/null)
		local _UPSTREAM_STATUS=$?
		if [ $_UPSTREAM_STATUS -eq 0 ]; then
			if [ -z "$_UPSTREAM_APPLICATION_STATUS" ] || [ $_UPSTREAM_APPLICATION_STATUS -gt 0 ]; then
				error "Upstream exited with error ($_UPSTREAM_APPLICATION_STATUS)"
			fi
			warn "Upstream finished: $_UPSTREAM_APPLICATION_PIPE ($_UPSTREAM_STATUS)"
			break
		fi
		detail " Upstream is still running: $_UPSTREAM_APPLICATION_PIPE ($_UPSTREAM_STATUS)"
		sleep 1
	done
}
_require() {
	local level=error
	if [ -z "$1" ]; then
		[ -n "$_WARN" ] && level=warn
		$level "$2 required $_REQUIRE_DETAILED_MESSAGE" $3
		return 1
	fi
	unset _REQUIRE_DETAILED_MESSAGE
}
_mail() {
	if [ $# -lt 3 ]; then
		warn "recipients[0], subject[1], message[2] is required - $# arguments provided"
		return 1
	fi
	local recipients=$(printf '%s' "$1" | tr '|' ' ')
	shift
	local subject="$1"
	shift
	local message="$1"
	shift
	printf "$message" | mail -s "$subject" $recipients
}
_alert() {
	_print_log 5 ALRT "$_CONF_LOG_C_ALRT" "$_CONF_LOG_BEEP_ALRT" "$1"
	local recipients="$_OPTN_LOG_ALERT_RECIPIENTS"
	local subject="Alert: $0 - $1"
	if [ -z "$recipients" ]; then
		warn "recipients is empty, aborting"
		return 1
	fi
	_mail "$recipients" "$subject" "$2"
}
_long_running_cmd() {
	[ -n "$_OPTN_DISABLE_LONG_RUNNING_CMD_NOTIFICATION" ] && return
	_APPLICATION_END_TIME=$(date +%s)
	_APPLICATION_RUNTIME=$(($_APPLICATION_END_TIME - $_APPLICATION_START_TIME))
	[ $_APPLICATION_RUNTIME -lt $_CONF_LOG_LONG_RUNNING_CMD ] && return
	local subject="[$_APPLICATION_NAME] - $_EXIT_MESSAGE - ($_EXIT_STATUS)"
	local message=""
	if [ -n "$_LOGFILE" ]; then
		message=$(tail -$_CONF_LOG_LONG_RUNNING_CMD_LINES $_LOGFILE)
	fi
	_alert "$subject" "$message"
}
_module_get_patch_path() {
	printf '%s' "$1" | $_CONF_GNU_GREP -Po '^.*.\.patch'
}
[ -z "$_INDEX" ] && _INDEX=0
_app_is_file=1
boot_loader_exec="$_CONF_APPLICATION_LIBRARY_PATH/bin/_key_value /boot/loader.conf {} sysctl ;"
boot_loader_supports_jails=1
boot_loader_post() {
	[ -z "$_IN_JAIL" ] && return 1
	warn "Moving configuration to /tmp/jail/boot_loader to be picked up by host"
	mkdir -p /tmp/jail
	mv /boot/loader.conf /tmp/jail/boot_loader
}
boot_loader_jails() {
	detail "Appending jail boot loader confs"
	local jail_mountpoint
	for jail_mountpoint in $(_jail_mount_points); do
		local boot_loader_jail_conf=$jail_mountpoint/tmp/jail/boot_loader
		if [ -e $boot_loader_jail_conf ]; then
			detail "Appending jail boot loader conf: $jail_mountpoint"
			printf '\n\n# %s jail boot_loader configuration\n' $jail_mountpoint >>/boot/loader.conf
			cat $boot_loader_jail_conf >>/boot/loader.conf
		fi
	done
}
_crontab_type=d
_crontab() {
	local crontabs_temp_path=$(_MKTEMP_OPTIONS=d _mktemp)
	local crontab_file
	local crontab_user_file
	local crontab_user
	local crontabs_directory
	for crontabs_directory in $@; do
		crontab_user=$(basename $crontabs_directory)
		crontab_user_file=$crontabs_temp_path/$crontab_user
		local crontab_path
		for crontab_path in $(find -s $crontabs_directory -type f); do
			printf '# %s\n' "$crontab_path" >>$crontab_user_file
			cat $crontab_path >>$crontab_user_file
		done
	done
	for crontab_user_file in $(find -s $crontabs_temp_path -type f | sort -u); do
		crontab_user=$(basename $crontab_user_file)
		info "Updating $crontab_user crontab"
		_crontab_append $crontab_user $crontab_user_file
		rm -f $crontab_user_file
	done
	unset user
}
_download() {
	local download_conf
	for download_conf in $@; do
		_do_download $download_conf
	done
}
_do_download() {
	mkdir -p /tmp/downloads
	. $1
	_download $uri
	_OUTPUT=/tmp/downloads/$(basename $_DOWNLOADED_FILE)
	cp $_DOWNLOADED_FILE $_OUTPUT
	if [ -n "$signature" ]; then
		sha256 -c $signature $_OUTPUT 2>/dev/null
		if [ $? -eq 0 ]; then
			printf '\tOK\n'
		else
			printf '\tFAIL\n'
		fi
	fi
	_extract $_OUTPUT
}
_file_type=d
_file_path='file'
_file_exec="rsync -lmrt {}/ / ;"
_go_is_file=1
_go() {
	_go_bootstrap
	_go_install "$@"
}
_jail_jail=0
_jail_options='-name *.jail'
_jail_exec='jail-setup {} ;'
_jail_mount_points() {
	zfs list -H | awk {'print$5'} | grep jails | grep -v jails$
}
__kernel_type=d
__kernel_path=_kernel
kernel_type=d
kernel_path=kernel
kernel_supports_jails=1
kernel() {
	if [ -z "$_IN_JAIL" ]; then
		kernel_patch_path=$_SYSTEM_REPOSITORY_PATH/$_CONF_FREEBSD_INSTALLER_SYSTEM_NAME/patches/physical/kernel-auto-generated.patch/_kernel _kernel_append "$@"
	else
		kernel_patch_path="/tmp/jail/kernel" _kernel_append "$@"
	fi
}
kernel_jails() {
	detail "Processing jail kernel configurations"
	local jail_mountpoint
	for jail_mountpoint in $(_jail_mount_points); do
		local kernel_jail_conf=$jail_mountpoint/tmp/jail/kernel
		kernel_patch_path=$_SYSTEM_REPOSITORY_PATH/$_CONF_FREEBSD_INSTALLER_SYSTEM_NAME/patches/physical/kernel-auto-generated.patch/_kernel _kernel_append $kernel_jail_conf
	done
}
_kernel_append() {
	mkdir -p $kernel_patch_path
	detail "Appending kernel conf to: $kernel_patch_path"
	find "$@" -type f -path '*/kernel/kernel' -exec $_CONF_GNU_GREP -Pvh '(^#|^$)' {} + >>$kernel_patch_path/kernel 2>/dev/null
	find "$@" -type f -path '*/kernel/modules' -exec $_CONF_GNU_GREP -Pvh '(^#|^$)' {} + >>$kernel_patch_path/modules 2>/dev/null
}
_npm_is_file=1
_package_is_file=1
_package() {
	[ $# -eq 0 ] && error 'No packages'
	_PACKAGE_OPTIONS="-y" _CONF_INSTALL_STEP_TIMEOUT=$_CONF_FREEBSD_INSTALLER_PACKAGE_TIMEOUT package_install "$@"
}
_periodic_exec="$_CONF_APPLICATION_LIBRARY_PATH/bin/_key_value /etc/periodic.conf {} sysrc ;"
_pf_anchor_schedule_exec="$_CONF_APPLICATION_LIBRARY_PATH/bin/_pf_anchor_schedule {} ;"
_pf_table_schedule_exec="$_CONF_APPLICATION_LIBRARY_PATH/bin/_pf_table_schedule {} ;"
_pypi_is_file=1
_rc_exec="$_CONF_APPLICATION_LIBRARY_PATH/bin/_key_value /etc/rc.conf {} sysrc ;"
_rust_is_file=1
_sysctl_exec="$_CONF_APPLICATION_LIBRARY_PATH/bin/_key_value /etc/sysctl.conf {} sysctl ;"
_user() {
	_user_bootstrap
	local user_conf
	for user_conf in $@; do
		_BACKUP_SSH=1 _users_add $user_conf
		unset _CONFIGURATION_INSTALLED _BACKUP_SSH
	done
}
zfs_supports_jails=1
zfs() {
	local zfs_volume_configuration
	for zfs_volume_configuration in $@; do
		if [ -n "$_IN_JAIL" ]; then
			mkdir -p /tmp/jail/zfs
			cp $zfs_volume_configuration /tmp/jail/zfs
			local zfs_volume_configuration_name=$(basename $zfs_volume_configuration)
			printf '_ZFS_JAILED=1\n' >>/tmp/jail/zfs/$zfs_volume_configuration_name
			printf '_ZFS_JAIL=%s\n' $_JAIL_NAME >>/tmp/jail/zfs/$zfs_volume_configuration_name
			printf '_ZFS_VOLUME_NAME=jails/%s/$_ZFS_VOLUME_NAME\n' $_JAIL_NAME >>/tmp/jail/zfs/$zfs_volume_configuration_name
		else
			_zfs_restore $zfs_volume_configuration
			unset _ZFS_DEV_NAME _ZFS_SOURCE_HOST _ZFS_VOLUME_NAME _ZFS_VOLUME_ABORT_CREATE _ZFS_ZAP_SNAP _ZFS_ZAP_TTL _ZFS_ZAP_BACKUP _ZFS_MOUNT_POINT _ZFS_VOLUME
		fi
	done
}
zfs_jails() {
	detail "Processing jail ZFS configurations"
	local jail_mountpoint
	for jail_mountpoint in $(_jail_mount_points); do
		local zfs_jail_conf=$jail_mountpoint/tmp/jail/zfs
		if [ -e $zfs_jail_conf ]; then
			detail "Processing jail ZFS configuration: $zfs_jail"
			_zfs $(find $zfs_jail_conf -type f 2>/dev/null)
		fi
	done
}
_zfs_restore() {
	info "_zfs_restore: $1"
	mkdir -p ~/.ssh/socket
	chmod 700 ~/.ssh/socket
	. $1
	[ -z "$_ZFS_DEV_NAME" ] && {
		warn "_ZFS_DEV_NAME is empty"
		return 1
	}
	[ -z "$_ZFS_SOURCE_HOST" ] && {
		warn "_ZFS_SOURCE_HOST is empty"
		return 1
	}
	[ -z "$_ZFS_VOLUME_NAME" ] && {
		warn "_ZFS_VOLUME_NAME is empty"
		return 1
	}
	_ZFS_VOLUME=${_ZFS_DEV_NAME}/$_ZFS_VOLUME_NAME
	_ZFS_SOURCE_SNAPSHOT=$(ssh $_ZFS_SOURCE_HOST zfs list -H -t snapshot | grep $_ZFS_VOLUME_NAME@ | grep -v backups | tail -1 | awk {'print$1'})
	[ -z "$_ZFS_SOURCE_SNAPSHOT" ] && {
		warn "No snapshots available, unable to setup clone: $_ZFS_VOLUME"
		return 1
	}
	_zfs_has_sufficient_space || return 1
	info "zfs create $_ZFS_VOLUME"
	zfs create -p $_ZFS_VOLUME
	[ -n "$_ZFS_MOUNT_POINT" ] && zfs set mountpoint=$_ZFS_MOUNT_POINT $_ZFS_VOLUME
	[ -n "$_ZFS_JAILED" ] && zfs set jailed=on $_ZFS_VOLUME
	zfs set readonly=on $_ZFS_VOLUME
	ssh $_ZFS_SOURCE_HOST zfs send -v $_ZFS_SOURCE_SNAPSHOT | zfs receive -F $_ZFS_VOLUME
	zfs allow -g wheel bookmark,diff,hold,send,snapshot $_ZFS_VOLUME
	if [ -n "$_ZFS_SNAPSHOT_USER" ]; then
		mkdir -p $_SYSTEM_REPOSITORY_PATH/$_CONF_FREEBSD_INSTALLER_SYSTEM_NAME/patches/any/zfs-snapshot-user.patch/run/
		printf 'zfs allow -u %s bookmark,diff,hold,send,snapshot %s' $_ZFS_SNAPSHOT_USER $_ZFS_VOLUME \
			>>$_SYSTEM_REPOSITORY_PATH/$_CONF_FREEBSD_INSTALLER_SYSTEM_NAME/patches/any/zfs-snapshot-user.patch/run/allow-zfs-snapshot-user
		chmod +x $_SYSTEM_REPOSITORY_PATH/$_CONF_FREEBSD_INSTALLER_SYSTEM_NAME/patches/any/zfs-snapshot-user.patch/run/allow-zfs-snapshot-user
	fi
	_zfs_zap
	_zfs_rclone
	info "zfs create $_ZFS_VOLUME - done"
}
_zfs_has_sufficient_space() {
	_ZFS_SNAPSHOT_SPACE=$(ssh $_ZFS_SOURCE_HOST zfs list -t snapshot $_ZFS_SOURCE_SNAPSHOT | awk '{print$4}' | grep "G$" | sed -e "s/G$//")
	_ZFS_SNAPSHOT_REQUIRED_SPACE=$(printf '2 * %s\n' "$_ZFS_SNAPSHOT_SPACE" | bc)
	_ZPOOL_FREE_SPACE=$(zpool list -H $_ZFS_DEV_NAME | awk '{print$4}' | grep "G$" | sed -e "s/G$//")
	if [ $(printf '%s < %s\n' "$_ZFS_SNAPSHOT_REQUIRED_SPACE" "$_ZPOOL_FREE_SPACE" | bc) -eq 0 ]; then
		warn "Insufficient free space: $_ZFS_VOLUME_NAME - $_ZFS_SNAPSHOT_SPACE $_ZFS_SNAPSHOT_REQUIRED_SPACE $_ZPOOL_FREE_SPACE"
		return 1
	fi
	info "Setting up $_ZFS_VOLUME_NAME - $_ZFS_SNAPSHOT_SPACE $_ZFS_SNAPSHOT_REQUIRED_SPACE $_ZPOOL_FREE_SPACE"
}
_geli_jail=0
_git_setup() {
	local git_remote_url=$1
	shift
	local git_path=$1
	shift
	local system_name=$1
	shift
	git clone $git_remote_url "$@" $git_path || error "Error cloning $git_remote_url [$@] | $git_path | $system_name"
	cd $git_path/$system_name || error "Unable to change to $git_path/$system_name"
	_git_handle_imports
}
_git_handle_imports() {
	[ -e import ] || {
		detail "No imports detected - $PWD"
		return 1
	}
	detail "Setting up import - $PWD"
	local git_import_contents=$(head -1 import)
	local git_import_name
	_git_is_git_remote "$git_import_contents"
	if [ $? -eq 0 ]; then
		local git_import_remote=$(printf '%s' "$git_import_contents" | cut -f1 -d'|')
		git_import_name=$(printf '%s' "$git_import_contents" | cut -f2 -d'|')
		local git_import_ref=$(printf '%s' "$git_import_contents" | cut -f3 -d'|')
		_git_setup $git_import_remote $git_import_name $git_import_name -b $git_import_ref
	else
		_require_file ../$git_import_contents
		cp -R ../$git_import_contents .
		cd $git_import_contents
		_git_handle_imports
	fi
}
_git_is_git_remote() {
	printf '%s' "$1" | grep -cq ':/'
}
_microcode_jail=0
_swap_jail=0
_update_jail=0
_crontab_get() {
	_require "$1" "Crontab User"
	_require "$2" "Crontab Filename to write to"
	_crontab_${_CONF_CRON_PROVIDER}_get "$@"
}
_crontab_append() {
	_require "$1" "Crontab User"
	_require_file "$2" "Crontab File"
	_has_contents $2 || return 1
	local current_crontab=$(_SUDO_USER=$1 _mktemp)
	_crontab_get $1 $current_crontab
	_sudo cat $2 | _sudo tee -a $current_crontab >/dev/null 2>&1
	_crontab_${_CONF_CRON_PROVIDER}_write $1 $current_crontab
	_sudo rm -f $current_crontab
}
_extract() {
	if [ $# -lt 2 ]; then
		warn "Expecting 2 arguments, source file, and target to extract to"
		return 1
	fi
	info "### Extracting $1"
	local _extension=$(printf '%s' "$1" | $_CONF_GNU_GREP -Po "\\.(tar\\.gz|tar\\.bz2|tbz2|tgz|zip|tar\\.xz)$")
	local sudo
	[ -n "$_SUDO_REQUIRED" ] && sudo=_sudo
	[ -n "$_CLEAN" ] && {
		$sudo rm -rf $2
		$sudo mkdir -p $2
	}
	case $_extension in
	".tar.gz" | ".tgz" | ".tar.bz2" | ".tbz2" | ".tar.xz")
		$sudo tar xf $1 -C $2
		;;
	".zip")
		$sudo unzip -q $1 -d $2
		;;
	*)
		warn "extension unsupported - $_extension $1"
		return 2
		;;
	esac
}
go_bootstrap() {
	go_bootstrap_is_go_available || {
		package_install $go_PACKAGE
		go_bootstrap_is_go_available || go_DISABLED=1
	}
}
go_bootstrap_is_go_available() {
	which go >/dev/null 2>&1
}
go_install() {
	GO111MODULE=on GOPATH=$go_INSTALL_PATH sudo_options="--preserve-env=GO111MODULE,GOPATH" _sudo go install $go_OPTIONS "$@" || {
		warn "go install failed: $go_OPTIONS $@"
		warn "  http_proxy: $http_proxy"
		warn "  git  proxy: $(git config --global http.proxy)"
	}
}
go_update() {
	:
}
go_uninstall() {
	_sudo go uninstall "$@"
}
go_is_installed() {
	return 1
}
go_is_file() {
	return 1
}
npm_bootstrap() {
	npm_bootstrap_is_npm_available || {
		package_install $npm_PACKAGE
		npm_bootstrap_is_npm_available || npm_DISABLED=1
	}
	npm_setup_proxy
}
npm_bootstrap_is_npm_available() {
	which npm >/dev/null 2>&1
}
npm_install() {
	local npm_package
	for npm_package in "$@"; do
		npm_is_installed $npm_package || _sudo npm install -s -g "$npm_package"
	done
}
npm_uninstall() {
	_sudo npm uninstall -s -g "$@"
}
npm_is_installed() {
	npm list -g $1 >/dev/null
}
npm_is_file() {
	return 1
}
npm_setup_proxy() {
	if [ -n "$http_proxy" ]; then
		warn "Configuring NPM to use an HTTP proxy: $http_proxy"
		npm config set proxy $http_proxy
		npm config set https-proxy $https_proxy
		_defer npm_clear_proxy
	fi
}
npm_clear_proxy() {
	warn "Reverting NPM HTTP proxy: $http_proxy"
	npm config rm proxy
	npm config rm https-proxy
}
pypi_bootstrap() {
	pypi_bootstrap_is_pypi_available || {
		package_install $pypi_PACKAGE
		pypi_bootstrap_is_pypi_available || pypi_DISABLED=1
	}
}
pypi_bootstrap_is_pypi_available() {
	which pip >/dev/null 2>&1
}
pypi_install() {
	_sudo pip install -U --no-input "$@" >/dev/null
}
pypi_uninstall() {
	_sudo pip uninstall -y "$@" >/dev/null
}
pypi_is_installed() {
	error "PIP - is installed - NOT IMPLEMENTED"
}
pypi_is_file() {
	return 1
}
rust_bootstrap() {
	rust_bootstrap_is_rust_available || {
		package_install $rust_PACKAGE
		rust_bootstrap_is_rust_available || rust_DISABLED=1
	}
}
rust_bootstrap_is_rust_available() {
	which cargo >/dev/null 2>&1
}
rust_install() {
	_sudo cargo install "$@"
}
rust_update() {
	_sudo cargo update "$@"
}
rust_uninstall() {
	_sudo cargo uninstall "$@"
}
rust_is_installed() {
	error "RUST - is installed - NOT IMPLEMENTED"
}
rust_is_file() {
	return 1
}
user_is_file() {
	return 0
}
_user_bootstrap() {
	detail "Bootstrapping user module"
	_sudo mkdir -p /root/.ssh/socket
	_sudo chmod -R 700 /root/.ssh/socket
	app-install configuration
	detail "bootstrapped user module"
}
user_uninstall() {
	. "$1"
	_require "$username" "username"
	rmuser -y $username
}
_users_add_argument() {
	if [ -n "$2" ]; then
		user_options="$user_options $1 $2"
	fi
}
_users_add() {
	. $1
	if [ "root" != "$username" ]; then
		_sudo pw user show $username >/dev/null 2>&1 || {
			info "### Add User: $1: $username"
			user_options="-n $username -m"
			_users_add_argument "-g" "$gid"
			_users_add_argument "-G" "$grouplist"
			_users_add_argument "-s" "$shell"
			_users_add_argument "-u" "$uid"
			_sudo pw useradd $user_options
		}
	else
		info "# Setting shell to $shell for root"
		_sudo chsh -s "$shell"
	fi
	if [ -n "$password" ]; then
		info "# Setting password for $username"
		_sudo chpass -p "$password" $username
	fi
	_users_configure
	_users_cleanup
}
_users_cleanup() {
	unset user_options username gid grouplist shell uid password system
}
_users_configure() {
	local user_home=$(grep "^$username:" /etc/passwd | cut -f6 -d':')
	_prepare_ssh_conf $user_home $username
	local original_pwd=$PWD
	cd /tmp
	if [ -n "$system" ]; then
		warn "$username is a system user, bypassing configuration"
	else
		_WARN_ON_ERROR=1 _SUDO_USER=$username \
			sudo_options="--preserve-env=_CONF_GIT_MIRROR,_WARN_ON_ERROR,_LOG_TARGET,_BACKUP_SSH,http_proxy,https_proxy -H" \
			_ _sudo conf restore || _user_configuredebug
	fi
	cd $original_pwd
}
_user_configuredebug() {
	warn "Error restoring configuration for $username"
	cat $user_home/.ssh/id_*.pub
	cat $user_home/.ssh/authorized_keys
	cat $user_home/.ssh/config
}
package_install_do() {
	_package_bootstrap
	_sudo pkg $_PKG_OPTIONS install $_PACKAGE_OPTIONS $@
}
package_is_installed() {
	_package_bootstrap
	pkg $_PKG_OPTIONS info -e $1 2>/dev/null
}
_package_bootstrap() {
	[ $_PKG_BOOTSTRAPPED ] && return
	ASSUME_ALWAYS_YES=yes
	_PKG_BOOTSTRAPPED=1
	if [ -n "$_ROOT" ] && [ "$_ROOT" != "/" ]; then
		_package_cache_already_mounted || _package_cache_mount
		_PKG_OPTIONS="-r $_ROOT"
	fi
	_package_enable_proxy
	_sudo pkg $_PKG_OPTIONS update -q
}
_package_cache_already_mounted() {
	mount | awk {'print$3'} | grep -q "$_ROOT/var/cache/pkg$"
}
_package_cache_mount() {
	[ -e /sbin/mount_nullfs ] || return 1
	[ -e /var/cache/pkg ] || return 1
	_sudo mkdir -p $_ROOT/var/cache/pkg
	info "Mounting host's package cache"
	_sudo mount -t nullfs /var/cache/pkg $_ROOT/var/cache/pkg || {
		warn "Error mounting host's package cache"
		warn "pkg cache mounts: $(mount | awk {'print$3'} | grep \"^$_ROOT/var/cache/pkg$\")"
		warn "mounts: $(mount | awk {'print$3'})"
		warn "/var/cache/pkg:"
		return 1
	}
	_defer _package_cache_umount
	info "Mounted host's package cache"
}
_package_cache_umount() {
	umount $_ROOT/var/cache/pkg
}
_package_enable_proxy() {
	[ -z "$http_proxy" ] && return 1
	[ $_PKG_PROXY_ENABLED ] && return 2
	_PKG_PROXY_ENABLED=1
	_defer _package_disable_proxy
	warn "[install] Configuring pkg to use an HTTP proxy: $http_proxy"
	local _updated_package_conf=$(_mktemp)
	if [ -e $_ROOT/usr/local/etc/pkg.conf ]; then
		grep -v '^pkg_env' $_ROOT/usr/local/etc/pkg.conf >$_updated_package_conf
		mv $_updated_package_conf $_ROOT/usr/local/etc/pkg.conf
	fi
	mkdir -p $_ROOT/usr/local/etc
	printf 'pkg_env: { http_proxy: "%s"}\n' "$http_proxy" >>$_ROOT/usr/local/etc/pkg.conf
}
_package_disable_proxy() {
	[ -z "$http_proxy" ] && return 1
	unset _PKG_PROXY_ENABLED
	warn "[freebsd-installer] Disabling HTTP proxy: $http_proxy"
	$_CONF_GNU_SED -i "s/^pkg_env/#pkg_env/" $_ROOT/usr/local/etc/pkg.conf
}
_require_file() {
	_require "$1" filename _require_file
	local level=error
	[ -n "$_WARN" ] && level=warn
	if [ ! -e $1 ]; then
		$level "File: $1 does not exist | $2"
		return 1
	fi
}
_has_contents() {
	_require_file "$1" "_has_contents:$1"
	[ $(_sudo wc -l <$1) -gt 0 ] && return 0
	return 1
}
_download() {
	mkdir -p $_CONF_CACHE_PATH
	local _cached_filename
	if [ $# -gt 1 ]; then
		_cached_filename="$2"
	else
		_cached_filename=$(basename $1 | sed -e 's/?.*$//')
	fi
	_DOWNLOADED_FILE=$_CONF_CACHE_PATH/$_cached_filename
	if [ -e $_DOWNLOADED_FILE ]; then
		detail "$1 already downloaded to: $_DOWNLOADED_FILE"
		return
	fi
	if [ -z "$_DOWNLOAD_DISABLED" ]; then
		info "Downloading $1 -> $_DOWNLOADED_FILE"
		curl $_CURL_OPTIONS -o $_DOWNLOADED_FILE -s -L "$1"
	else
		_continue_if "Please manually download: $1 and place it in $_DOWNLOADED_FILE" "Y/n"
	fi
}
_download_install_file() {
	_require "$1" "1 (_download_install_file) target filename"
	info "Installing $_DOWNLOADED_FILE -> $1"
	_sudo mkdir -p $(dirname $1)
	_sudo cp $_DOWNLOADED_FILE $1
	_sudo chmod 444 $1
	unset _DOWNLOADED_FILE
	[ ! -e $1 ] && return 1
	return 0
}
_sed_safe() {
	printf '%s' $1 | sed -e "s/\//\\\\\//g"
}
_prepare_ssh_conf() {
	_sudo mkdir -p $1/.ssh/socket
	_sudo chmod 700 $1/.ssh/socket
	printf 'StrictHostKeyChecking no\n' | _sudo tee -a $1/.ssh/config >/dev/null
	[ -n "$_HOST_IP" ] && _ssh_init_bastion_host $1
	if [ -e /tmp/HOST-SSH ]; then
		info "Copying host ssh -> $1/.ssh"
		_sudo cp /tmp/HOST-SSH/id* $1/.ssh
	fi
	if [ -e /tmp/CONFIG-WALTERJWHITE ]; then
		info "Copying walterjwhite conf -> $1/.config/walterjwhite"
		_sudo mkdir -p $1/.config
		_sudo cp -r /tmp/CONFIG-WALTERJWHITE $1/.config/walterjwhite
	fi
	[ "$2" != "root" ] && _sudo chown -R $2:$2 $1
}
_ssh_init_bastion_host() {
	info "Setting up SSH Bastion host: $1"
	printf 'Host host-proxy\n' | _sudo tee -a $1/.ssh/config >/dev/null
	printf ' Hostname %s\n' "$_HOST_IP" | _sudo tee -a $1/.ssh/config >/dev/null
	printf ' User root\n' | _sudo tee -a $1/.ssh/config >/dev/null
	printf 'Host git\n' | _sudo tee -a $1/.ssh/config >/dev/null
	printf ' ProxyJump host-proxy:%s\n' $_SSH_HOST_PORT | _sudo tee -a $1/.ssh/config >/dev/null
	printf ' User root\n' | _sudo tee -a $1/.ssh/config >/dev/null
	printf 'Host freebsd-package-cache\n' | _sudo tee -a $1/.ssh/config >/dev/null
	printf ' ProxyJump host-proxy:%s\n' $_SSH_HOST_PORT | _sudo tee -a $1/.ssh/config >/dev/null
	printf ' User root\n' | _sudo tee -a $1/.ssh/config >/dev/null
	printf 'Host %s\n' "$_PACKAGE_CACHE" | _sudo tee -a $1/.ssh/config >/dev/null
	printf ' ProxyJump host-proxy:%s\n' $_SSH_HOST_PORT | _sudo tee -a $1/.ssh/config >/dev/null
	printf ' User root\n' | _sudo tee -a $1/.ssh/config >/dev/null
	if [ "$_PACKAGE_CACHE" != "$_GIT_MIRROR" ]; then
		printf 'Host %s\n' "$_GIT_MIRROR" | _sudo tee -a $1/.ssh/config >/dev/null
		printf ' ProxyJump host-proxy\n' | _sudo tee -a $1/.ssh/config >/dev/null
		printf ' User root\n' | _sudo tee -a $1/.ssh/config >/dev/null
	fi
	_sudo chmod 600 $1/.ssh/config
}
_timeout() {
	local timeout=$1
	shift
	local message=$1
	shift
	local timeout_units='s'
	if [ $(printf '%s' "$timeout" | grep -c '[smhd]{1}') -gt 0 ]; then
		unset timeout_units
	fi
	local timeout_level=error
	[ $_WARN ] && timeout_level=warn
	local sudo
	[ -n "$_SUDO_REQUIRED" ] || [ -n "$_SUDO_USER" ] && sudo=_sudo
	$sudo timeout $_OPTIONS $timeout "$@" || {
		local error_status=$?
		local error_message="Other error"
		if [ $error_status -eq 124 ]; then
			error_message="Timed Out"
		fi
		[ $_TIMEOUT_ERR_FUNCTION ] && $_TIMEOUT_ERR_FUNCTION
		$timeout_level "_timeout: $error_message: ${timeout}${timeout_units} - $message ($error_status): $sudo timeout $_OPTIONS $timeout $* ($USER)"
		return $error_status
	}
}
_ZFS_RCLONE_PACKAGE=rclone
_zfs_rclone() {
	local rclone_patch_path=patches/zfs-rclone.patch/rclone.post-run
	mkdir -p $(dirname $rclone_patch_path)
	if [ -n "$_ZFS_RCLONE_TARGET" ]; then
		info "Configuring ZFS rclone target: $_ZFS_RCLONE_TARGET on $_ZFS_VOLUME"
		[ ! -e $rclone_patch_path ] && printf 'pkg install -yq %s\n' $_ZFS_RCLONE_PACKAGE >>$rclone_patch_path
		zfs set rclone:target=$_ZFS_RCLONE_TARGET $_ZFS_VOLUME
	fi
	[ -n "$_ZFS_RCLONE_PATH" ] && zfs set rclone:path=$_ZFS_RCLONE_PATH $_ZFS_VOLUME
	unset _ZFS_RCLONE_PATH _ZFS_RCLONE_TARGET
}
_ZFS_ZAP_PACKAGE=zap
_zfs_zap() {
	local zap_patch_path=patches/zfs-zap.patch/zap.post-run
	mkdir -p $(dirname $zap_patch_path)
	if [ -n "$_ZFS_ZAP_SNAP" ]; then
		warn "Detected ZFS ZAP, setting up zap"
		[ ! -e $zap_patch_path ] && printf 'pkg install -yq %s\n' $_ZFS_ZAP_PACKAGE >>$zap_patch_path
		printf 'zfs allow -u zap bookmark,diff,hold,send,snapshot %s\n' $_ZFS_VOLUME >>$zap_patch_path
		zfs set zap:snap=on $_ZFS_VOLUME
	fi
	[ -n "$_ZFS_ZAP_TTL" ] && zfs set zap:ttl=$_ZFS_ZAP_TTL $_ZFS_VOLUME
	[ -n "$_ZFS_ZAP_BACKUP" ] && zfs set zap:backup=$_ZFS_ZAP_BACKUP $_ZFS_VOLUME
	unset _ZFS_ZAP_TTL _ZFS_ZAP_BACKUP _ZFS_ZAP_SNAP
}
_include beep context freebsd-installer logging net paths platform wait
: ${_CONF_LOG_HEADER:="##################################################"}
: ${_CONF_LOG_C_ALRT:="1;31m"}
: ${_CONF_LOG_C_ERR:="1;31m"}
: ${_CONF_LOG_C_SCS:="1;32m"}
: ${_CONF_LOG_C_WRN:="1;33m"}
: ${_CONF_LOG_C_INFO:="1;36m"}
: ${_CONF_LOG_C_DETAIL:="1;0;36m"}
: ${_CONF_LOG_C_DEBUG:="1;35m"}
: ${_CONF_LOG_C_STDIN:="1;34m"}
: ${_CONF_LOG_DATE_FORMAT:="%Y/%m/%d|%H:%M:%S"}
: ${_CONF_LOG_DATE_TIME_FORMAT:="%Y/%m/%d %H:%M:%S"}
: ${_CONF_LOG_AUDIT:=0}
: ${_CONF_LOG_LEVEL:=2}
: ${_CONF_LOG_INDENT:="  "}
: ${_CONF_LOG_CONF_VALIDATION_FUNCTION:=warn}
: ${_CONF_LOG_WAITER_LEVEL:=debug}
: ${_CONF_LOG_FEATURE_TIMEOUT_ERROR_LEVEL:=warn}
: ${_CONF_LOG_LONG_RUNNING_CMD:=30}
: ${_CONF_LOG_LONG_RUNNING_CMD_LINES:=1000}
[ -t 0 ] && INTERACTIVE=1
: ${LIB:="beep.sh context.sh environment.sh exec.sh exit.sh help.sh include.sh logging.sh mktemp.sh platform.sh processes.sh stdin.sh syslog.sh sudo.sh wait.sh validation.sh net/mail.sh alert.sh"}
: ${CFG:="logging platform context wait beep paths net"}
: ${SUPPORTED_PLATFORMS:="Apple FreeBSD Linux Windows"}
: ${BUILD_PLATFORMS:="FreeBSD Linux Apple Windows"}
which pgrep >/dev/null 2>&1 && _PARENT_PROCESSES_FUNCTION=_parent_processes_pgrep
_DETECTED_PLATFORM=$(uname)
case $_DETECTED_PLATFORM in
Darwin)
	_DETECTED_PLATFORM=Apple
	;;
MINGW64_NT-*)
	_DETECTED_PLATFORM=Windows
	;;
esac
: ${_CONF_INSTALL_CONTEXT:=$_CONSOLE_CONTEXT_ID}
: ${_CONF_INSTALL_CONTEXT:=default}
: ${_CONF_WAIT_INTERVAL:=30}
: ${RSRC_BEEP:=/tmp/beep}
: ${_CONF_LOG_BEEP_TIMEOUT:=5}
: ${_CONF_LOG_BEEP_ERR:='L32c'}
: ${_CONF_LOG_BEEP_ALRT:='L32f'}
: ${_CONF_LOG_BEEP_SCS:='L32a'}
: ${_CONF_LOG_BEEP_WRN:=''}
: ${_CONF_LOG_BEEP_INFO:=''}
: ${_CONF_LOG_BEEP_DETAIL:=''}
: ${_CONF_LOG_BEEP_DEBUG:=''}
: ${_CONF_LOG_BEEP_STDIN:='L32ab'}
: ${_CONF_LOG_SUDO_BEEP_TONE:=L32aL8fL32c}
[ "$HOME" = "/" ] && HOME=/root
: ${_CONF_LIBRARY_PATH:=/usr/local/walterjwhite}
: ${_CONF_BIN_PATH:=/usr/local/bin}
_CONF_DATA_PATH=$HOME/.data
_CONF_CACHE_PATH=$_CONF_DATA_PATH/.cache
_CONF_CONFIG_PATH=$HOME/.config/walterjwhite
_CONF_RUN_PATH=/tmp/$USER/walterjwhite/app
_CONF_DATA_ARTIFACTS_PATH=$_CONF_DATA_PATH/install-v2/artifacts
_CONF_DATA_REGISTRY_PATH=$_CONF_DATA_PATH/install-v2/registry
_CONF_APPLICATION_DATA_PATH=$_CONF_DATA_PATH/$_APPLICATION_NAME
_CONF_APPLICATION_CONFIG_PATH=$_CONF_CONFIG_PATH/$_APPLICATION_NAME
_CONF_APPLICATION_LIBRARY_PATH=$_CONF_LIBRARY_PATH/$_APPLICATION_NAME
: ${_CONF_NETWORK_TEST_TIMEOUT:=5}
: ${_CONF_NETWORK_TEST_TARGETS:="http://connectivity-check.ubuntu.com http://example.org http://www.google.com http://telehack.com http://lxer.com"}
_REQUIRED_APP_CONF="_CONF_FREEBSD_INSTALLER_CONFIGURATION_DIRECTORY _CONF_FREEBSD_INSTALLER_DEV _CONF_FREEBSD_INSTALLER_DEV_NAME _CONF_FREEBSD_INSTALLER_GELI_GIT _CONF_FREEBSD_INSTALLER_GIT_MIRROR _CONF_FREEBSD_INSTALLER_JAIL_ACCESS_NETWORK _CONF_FREEBSD_INSTALLER_JAIL_HOST_IP _CONF_FREEBSD_INSTALLER_JAIL_PROXY_PORT _CONF_FREEBSD_INSTALLER_JAIL_SSH_HOST_PORT _CONF_FREEBSD_INSTALLER_JAIL_SUBNET _CONF_FREEBSD_INSTALLER_LOG_DIRECTORY _CONF_FREEBSD_INSTALLER_PACKAGE_CACHE _CONF_FREEBSD_INSTALLER_PACKAGE_TIMEOUT _CONF_FREEBSD_INSTALLER_REQUIRED_BASE_PACKAGES _CONF_FREEBSD_INSTALLER_REQUIRED_MICROCODE_PACKAGES _CONF_FREEBSD_INSTALLER_REQUIRED_PACKAGES _CONF_FREEBSD_INSTALLER_SYSTEM_BRANCH _CONF_FREEBSD_INSTALLER_SYSTEM_GIT _CONF_FREEBSD_INSTALLER_SYSTEM_IDENTIFICATION _CONF_FREEBSD_INSTALLER_SYSTEM_NAME _CONF_FREEBSD_INSTALLER_SYSTEM_REF _CONF_GNU_GREP _CONF_GNU_SED"
_is_backgrounded && _BACKGROUNDED=1
_init_logging
unset _DEFERS _EXIT
_APPLICATION_START_TIME=$(date +%s)
_APPLICATION_CMD=$(basename $0)
trap _on_exit INT 0 1 2 3 4 6 15
for _ARG in "$@"; do
	case $_ARG in
	-conf-* | -[a-z0-9][a-z0-9][a-z0-9]*)
		_configuration_name=${_ARG#*-}
		_configuration_name=${_configuration_name%%=*}
		if [ $(printf '%s' "$_configuration_name" | grep -c '_') -eq 0 ]; then
			if [ $(printf '%s' "$_configuration_name" | grep -c '^conf') -gt 0 ]; then
				_configuration_name=$(printf '%s' "$_configuration_name" | sed -e "s/-/-$_APPLICATION_NAME-/")
			else
				_configuration_name=$(printf '%s' "$_configuration_name" | sed -e "s/^/$_APPLICATION_NAME-/")
			fi
		fi
		_configuration_name=$(printf '%s' $_configuration_name | tr '-' '_' | tr '[:lower:]' '[:upper:]')
		if [ $(printf '%s' "$_ARG" | grep -c '=') -eq 0 ]; then
			_configuration_value=1
		else
			_configuration_value=${_ARG#*=}
		fi
		export _$_configuration_name="$_configuration_value"
		unset _configuration_name
		shift
		;;
	-h | --help)
		_print_help_and_exit
		;;
	-w=*)
		_WAITER_PID="${1#*=}"
		shift
		;;
	-w)
		_WAITEE=1
		shift
		;;
	*)
		break
		;;
	esac
done
for _REQUIRED_APP_CONF_ITEM in $_REQUIRED_APP_CONF; do
	_variable_is_set $_REQUIRED_APP_CONF_ITEM || {
		warn "$_REQUIRED_APP_CONF_ITEM is unset"
		_MISSING_REQUIRED_CONF=1
	}
done
[ -n "$_MISSING_REQUIRED_CONF" ] && error "Required configuration is missing, please refer to above error(s)"
if [ -z "$_CONTEXT_VALIDATED" ]; then
	_context_id_is_valid "$_CONF_INSTALL_CONTEXT"
	_CONTEXT_VALIDATED=0
fi
_APPLICATION_CONTEXT_GROUP=$_CONF_RUN_PATH/$_CONF_INSTALL_CONTEXT
_APPLICATION_CMD_DIR=$_APPLICATION_CONTEXT_GROUP/$_APPLICATION_NAME/$_APPLICATION_CMD
_waitee_init
_waiter
anchor_name=$(printf '%s' $1 | tr '.' '_')
anchor_file=$(find /usr/local/etc/walterjwhite/firewall/anchor/.data -type f -name $1)
anchor_filename=$(basename $1)
_PATCH_PATH=$(_module_get_patch_path $1)
pf_anchor_schedule_file=$_PATCH_PATH/crontab/root/pf.$anchor_filename.schedule
for anchor_schedule_line in $($_CONF_GNU_GREP -Pvh '^(#|$)' $1); do
  anchor_schedule_start=$(printf '%s' "$anchor_schedule_line" | cut -f1 -d'|')
  anchor_schedule_end=$(printf '%s' "$anchor_schedule_line" | cut -f2 -d'|')
  mkdir -p $(dirname $pf_anchor_schedule_file)
  info "$anchor_name:$anchor_schedule_start -> $anchor_schedule_end"
  if [ -n "$anchor_schedule_start" ]; then
    printf '%s pfctl -a %s -f %s\n' "$anchor_schedule_start" $anchor_name $anchor_file >>$pf_anchor_schedule_file
  fi
  if [ -n "$anchor_schedule_end" ]; then
    printf '%s pfctl -a %s -F all\n' "$anchor_schedule_end" $anchor_name >>$pf_anchor_schedule_file
    printf '%s pfctl -a %s -F states\n' "$anchor_schedule_end" $anchor_name >>$pf_anchor_schedule_file
  fi
done
