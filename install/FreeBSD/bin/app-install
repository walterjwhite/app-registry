#!/bin/sh
set -a
_APPLICATION_NAME='install'
_PLATFORM="FreeBSD"
_TAR_ARGS=" -f - "
_SUDO_CMD="sudo"
_ARCHITECTURE=$(uname -m)
_INSTALL_INSTALLER=pkg
: ${_CONF_INSTALL_GNU_GREP:=/usr/local/bin/grep}
: ${_CONF_INSTALL_GNU_SED:=gsed}
_PLATFORM_PACKAGES="git gsed gnugrep gtar gawk"
_NPM_PACKAGE="npm"
_RUST_PACKAGE="rust"
_PYPI_DISABLED=1
_PYPI_PACKAGE="python39 py39-pip"
_GO_PACKAGE="go"
GOPATH=/usr/local
PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin:/usr/local/sbin
if [ "$HOME" = "/" ]; then
	HOME=/root
fi
: ${_CONF_INSTALL_C_ALRT:="1;31m"}
: ${_CONF_INSTALL_C_ERR:="1;31m"}
: ${_CONF_INSTALL_C_SCS:="1;32m"}
: ${_CONF_INSTALL_C_WRN:="1;33m"}
: ${_CONF_INSTALL_C_INFO:="1;36m"}
: ${_CONF_INSTALL_C_DETAIL:="1;0;36m"}
: ${_CONF_INSTALL_C_DEBUG:="1;35m"}
: ${_CONF_INSTALL_C_STDIN:="1;34m"}
: ${_CONF_INSTALL_AUDIT:=0}
: ${_CONF_INSTALL_LOG_LEVEL:=2}
: ${_CONF_INSTALL_DATE_FORMAT:="%Y/%m/%d|%H:%M:%S"}
: ${_CONF_INSTALL_DATE_TIME_FORMAT:="%Y/%m/%d %H:%M:%S"}
: ${_CONF_INSTALL_WAIT_INTERVAL:=30}
: ${_CONF_INSTALL_NO_PAGER:=0}
: ${_CONF_INSTALL_BEEP_TIMEOUT:=5}
: ${_CONF_INSTALL_BEEP_ERR:='L32c'}
: ${_CONF_INSTALL_BEEP_ALRT:='L32f'}
: ${_CONF_INSTALL_BEEP_SCS:='L32a'}
: ${_CONF_INSTALL_BEEP_WRN:=''}
: ${_CONF_INSTALL_BEEP_INFO:=''}
: ${_CONF_INSTALL_BEEP_DETAIL:=''}
: ${_CONF_INSTALL_BEEP_DEBUG:=''}
: ${_CONF_INSTALL_BEEP_STDIN:='L32ab'}
: ${_CONF_INSTALL_SYSTEM_TEMPLATE_PATH:=/usr/share/git/templates}
: ${_CONF_INSTALL_LIBRARY_PATH:=/usr/local/walterjwhite}
: ${_CONF_INSTALL_BIN_PATH:=/usr/local/bin}
: ${_CONF_INSTALL_CONTEXT:=$_CONSOLE_CONTEXT_ID}
: ${_CONF_INSTALL_CONTEXT:=default}
: ${_CONF_INSTALL_DATA_PATH:=$HOME/.data}
: ${_CONF_INSTALL_CACHE_PATH:=$_CONF_INSTALL_DATA_PATH/.cache}
: ${_CONF_INSTALL_CONFIG_PATH:=$HOME/.config/walterjwhite}
: ${_CONF_INSTALL_STEP_TIMEOUT:=300}
: ${_CONF_INSTALL_CONF_VALIDATION_FUNCTION:=_warn}
: ${_CONF_INSTALL_INDENT:="  "}
: ${_CONF_INSTALL_FEATURE_TIMEOUT_ERROR_LEVEL:=warn}
case $(ps -o stat= -p $$) in
*+*) ;;
*)
	_BACKGROUNDED=1
	;;
esac
if [ -z "$_NON_INTERACTIVE" ]; then
	tty >/dev/null || _NON_INTERACTIVE=0
fi
if ! (: >&7) 2>/dev/null; then
	exec 7>&1
	exec 8>&2
fi
if [ $_NON_INTERACTIVE ]; then
	_LOG_TARGET=7
	_NLOG_TARGET=1
else
	_LOG_TARGET=8
	_NLOG_TARGET=2
fi
: ${_CONF_INSTALL_WAITER_LEVEL:=_debug}
: ${_CONF_INSTALL_IOSTAT_DURATION:=5}
which pgrep >/dev/null 2>&1 && _PARENT_PROCESSES_FUNCTION=_parent_processes_pgrep
_DETECTED_PLATFORM=$(uname)
case $_DETECTED_PLATFORM in
Darwin)
	_DETECTED_PLATFORM=Apple
	;;
esac
: ${_CONF_INSTALL_REPOSITORY_URL:=https://github.com/walterjwhite}
: ${_CONF_INSTALL_MIRROR_URLS:=https://github.com/walterjwhite}
: ${_CONF_INSTALL_SUDO_TIMEOUT:=270}
: ${_CONF_INSTALL_NETWORK_TEST_TARGET:=google.com}
: ${_CONF_INSTALL_NETWORK_TEST_TIMEOUT:=5}
: ${_CONF_INSTALL_TEAMS_MESSAGE_PARALLELIZATION:=5}
: ${_CONF_INSTALL_PARALLEL_BUILD:=8}
: ${_CONF_INSTALL_APP_REGISTRY_GIT_URL:=github.com/walterjwhite/app.registry.git}
: ${_CONF_INSTALL_RUN_PATH:=/tmp/$USER/walterjwhite/app}
_CONF_INSTALL_DATA_ARTIFACTS_PATH=$_CONF_INSTALL_DATA_PATH/install/artifacts
_CONF_INSTALL_DATA_REGISTRY_PATH=$_CONF_INSTALL_DATA_PATH/install/registry
_CONF_INSTALL_APPLICATION_DATA_PATH=$_CONF_INSTALL_DATA_PATH/$_APPLICATION_NAME
_CONF_INSTALL_APPLICATION_CONFIG_PATH=$_CONF_INSTALL_CONFIG_PATH/$_APPLICATION_NAME
_CONF_INSTALL_APPLICATION_LIBRARY_PATH=$_CONF_INSTALL_LIBRARY_PATH/$_APPLICATION_NAME
_PLATFORM="FreeBSD"
_TAR_ARGS=" -f - "
_SUDO_CMD="sudo"
_ARCHITECTURE=$(uname -m)
_INSTALL_INSTALLER=pkg
: ${_CONF_INSTALL_GNU_GREP:=/usr/local/bin/grep}
: ${_CONF_INSTALL_GNU_SED:=gsed}
_PLATFORM_PACKAGES="git gsed gnugrep gtar gawk"
_NPM_PACKAGE="npm"
_RUST_PACKAGE="rust"
_PYPI_DISABLED=1
_PYPI_PACKAGE="python39 py39-pip"
_GO_PACKAGE="go"
GOPATH=/usr/local
PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin:/usr/local/sbin
if [ "$HOME" = "/" ]; then
	HOME=/root
fi
: ${_CONF_INSTALL_C_ALRT:="1;31m"}
: ${_CONF_INSTALL_C_ERR:="1;31m"}
: ${_CONF_INSTALL_C_SCS:="1;32m"}
: ${_CONF_INSTALL_C_WRN:="1;33m"}
: ${_CONF_INSTALL_C_INFO:="1;36m"}
: ${_CONF_INSTALL_C_DETAIL:="1;0;36m"}
: ${_CONF_INSTALL_C_DEBUG:="1;35m"}
: ${_CONF_INSTALL_C_STDIN:="1;34m"}
: ${_CONF_INSTALL_AUDIT:=0}
: ${_CONF_INSTALL_LOG_LEVEL:=2}
: ${_CONF_INSTALL_DATE_FORMAT:="%Y/%m/%d|%H:%M:%S"}
: ${_CONF_INSTALL_DATE_TIME_FORMAT:="%Y/%m/%d %H:%M:%S"}
: ${_CONF_INSTALL_WAIT_INTERVAL:=30}
: ${_CONF_INSTALL_NO_PAGER:=0}
: ${_CONF_INSTALL_BEEP_TIMEOUT:=5}
: ${_CONF_INSTALL_BEEP_ERR:='L32c'}
: ${_CONF_INSTALL_BEEP_ALRT:='L32f'}
: ${_CONF_INSTALL_BEEP_SCS:='L32a'}
: ${_CONF_INSTALL_BEEP_WRN:=''}
: ${_CONF_INSTALL_BEEP_INFO:=''}
: ${_CONF_INSTALL_BEEP_DETAIL:=''}
: ${_CONF_INSTALL_BEEP_DEBUG:=''}
: ${_CONF_INSTALL_BEEP_STDIN:='L32ab'}
: ${_CONF_INSTALL_SYSTEM_TEMPLATE_PATH:=/usr/share/git/templates}
: ${_CONF_INSTALL_LIBRARY_PATH:=/usr/local/walterjwhite}
: ${_CONF_INSTALL_BIN_PATH:=/usr/local/bin}
: ${_CONF_INSTALL_CONTEXT:=$_CONSOLE_CONTEXT_ID}
: ${_CONF_INSTALL_CONTEXT:=default}
: ${_CONF_INSTALL_DATA_PATH:=$HOME/.data}
: ${_CONF_INSTALL_CACHE_PATH:=$_CONF_INSTALL_DATA_PATH/.cache}
: ${_CONF_INSTALL_CONFIG_PATH:=$HOME/.config/walterjwhite}
: ${_CONF_INSTALL_STEP_TIMEOUT:=300}
: ${_CONF_INSTALL_CONF_VALIDATION_FUNCTION:=_warn}
: ${_CONF_INSTALL_INDENT:="  "}
: ${_CONF_INSTALL_FEATURE_TIMEOUT_ERROR_LEVEL:=warn}
case $(ps -o stat= -p $$) in
*+*) ;;
*)
	_BACKGROUNDED=1
	;;
esac
if [ -z "$_NON_INTERACTIVE" ]; then
	tty >/dev/null || _NON_INTERACTIVE=0
fi
if ! (: >&7) 2>/dev/null; then
	exec 7>&1
	exec 8>&2
fi
if [ $_NON_INTERACTIVE ]; then
	_LOG_TARGET=7
	_NLOG_TARGET=1
else
	_LOG_TARGET=8
	_NLOG_TARGET=2
fi
: ${_CONF_INSTALL_WAITER_LEVEL:=_debug}
: ${_CONF_INSTALL_IOSTAT_DURATION:=5}
which pgrep >/dev/null 2>&1 && _PARENT_PROCESSES_FUNCTION=_parent_processes_pgrep
_DETECTED_PLATFORM=$(uname)
case $_DETECTED_PLATFORM in
Darwin)
	_DETECTED_PLATFORM=Apple
	;;
esac
: ${_CONF_INSTALL_REPOSITORY_URL:=https://github.com/walterjwhite}
: ${_CONF_INSTALL_MIRROR_URLS:=https://github.com/walterjwhite}
: ${_CONF_INSTALL_SUDO_TIMEOUT:=270}
: ${_CONF_INSTALL_NETWORK_TEST_TARGET:=google.com}
: ${_CONF_INSTALL_NETWORK_TEST_TIMEOUT:=5}
: ${_CONF_INSTALL_TEAMS_MESSAGE_PARALLELIZATION:=5}
: ${_CONF_INSTALL_PARALLEL_BUILD:=8}
: ${_CONF_INSTALL_APP_REGISTRY_GIT_URL:=github.com/walterjwhite/app.registry.git}
: ${_CONF_INSTALL_RUN_PATH:=/tmp/$USER/walterjwhite/app}
_CONF_INSTALL_DATA_ARTIFACTS_PATH=$_CONF_INSTALL_DATA_PATH/install/artifacts
_CONF_INSTALL_DATA_REGISTRY_PATH=$_CONF_INSTALL_DATA_PATH/install/registry
_CONF_INSTALL_APPLICATION_DATA_PATH=$_CONF_INSTALL_DATA_PATH/$_APPLICATION_NAME
_CONF_INSTALL_APPLICATION_CONFIG_PATH=$_CONF_INSTALL_CONFIG_PATH/$_APPLICATION_NAME
_CONF_INSTALL_APPLICATION_LIBRARY_PATH=$_CONF_INSTALL_LIBRARY_PATH/$_APPLICATION_NAME
_beep() {
	if [ -n "$_BEEPING" ]; then
		_debug "Another 'beep' is in progress"
		return
	fi
	_BEEPING=1
	_do_beep "$@" &
}
_do_beep() {
	if [ -e /dev/speaker ]; then
		printf '%s' "$1" >/dev/speaker
	fi
	_beep_done
}
_beep_done() {
	unset _BEEPING
}
_mktemp() {
	mktemp -t ${_APPLICATION_NAME}.${_APPLICATION_CMD}.$1
}
_notify() {
	local title=$1
	local message=$2
	zenity --info --text="$_APPLICATION_NAME - $_APPLICATION_CMD - $title\n$message"
}
_open() {
	xdg-open $1
	sleep 1
}
_syslog() {
	logger -i -t "$_APPLICATION_NAME.$_APPLICATION_CMD" "$1"
}
_get_defaults() {
	local app_name=$(printf "$_TARGET_APPLICATION_NAME" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
	find all/defaults $_PLATFORM/defaults -type f \
		-exec $_CONF_INSTALL_GNU_GREP -Poh "_CONF_${app_name}_[\w_\d]{3,}" {} + 2>/dev/null | sort -u
}
_variable_is_set() {
	if [ $(env | grep "^$1=.*$" | wc -l) -gt 0 ]; then
		return 0
	fi
	return 1
}
_has_required_conf() {
	if [ -n "$_REQUIRED_APP_CONF" ]; then
		for _REQUIRED_APP_CONF_ITEM in $(printf '%s' "$_REQUIRED_APP_CONF" | sed -e 's/$/\n/' | tr '|' '\n'); do
			_variable_is_set $_REQUIRED_APP_CONF_ITEM || {
				_warn "$_REQUIRED_APP_CONF_ITEM is unset"
				_MISSING_REQUIRED_CONF=1
			}
		done
		if [ -n "$_MISSING_REQUIRED_CONF" ]; then
			_error "Required configuration is missing, please refer to above error(s)"
		fi
	fi
}
_environment_filter() {
	grep '^_CONF_'
}
_environment_dump() {
	if [ -z "$_APPLICATION_PIPE_DIR" ]; then
		return
	fi
	if [ -z "$_ENVIRONMENT_FILE" ]; then
		_ENVIRONMENT_FILE=$_APPLICATION_PIPE_DIR/environment
	fi
	mkdir -p $(dirname $_ENVIRONMENT_FILE)
	env | _environment_filter | sort -u | grep -v '^$' | sed -e 's/=/="/' -e 's/$/"/' >>$_ENVIRONMENT_FILE
}
_environment_load() {
	if [ -n "$_ENVIRONMENT_FILE" ]; then
		if [ -e "$_ENVIRONMENT_FILE" ]; then
			. $_ENVIRONMENT_FILE 2>/dev/null
		else
			_warn "$_ENVIRONMENT_FILE does not exist!"
		fi
	fi
}
_is_feature() {
	printf '%s' $_SETUP | grep -c /feature/
}
_disable_feature() {
	if [ -z "$_FEATURE_DISABLED" ]; then
		_warn "Error installing feature: $_FEATURE ($1)"
	fi

	printf '%s\n' $(_feature_key $1)_DISABLED=1 | _metadata_write
}
_is_feature_enabled() {
	local _feature_key=$(_feature_key $1)
	if [ $(env | grep -c "^${_feature_key}_DISABLED=1$") -gt 0 ]; then
		_warn "$1 is disabled"
		return 1
	fi
	return 0
}
_feature_key() {
	printf '%s\n' "_FEATURE_${1}" | tr '[:lower:]' '[:upper:]' | tr '-' '_'
}
_call() {
	local _function_name=$1
	shift
	type $_function_name >/dev/null 2>&1
	local _return=$?
	if [ $_return -gt 0 ]; then
		_debug "${_function_name} does not exist"
		return $_return
	fi
	$_function_name "$@"
}
_require() {
	local level=error
	if [ -z "$1" ]; then
		if [ -n "$_WARN" ]; then
			level=warn
		fi
		_$level "$2 required $_REQUIRE_DETAILED_MESSAGE" $3
		return 1
	fi
	unset _REQUIRE_DETAILED_MESSAGE
}
_read_if() {
	if [ $(env | grep -c "^$2=.*") -eq 1 ]; then
		_debug "$2 is already set"
		return 1
	fi
	[ $_NON_INTERACTIVE ] && _error "Running in non-interactive mode and user input was requested: $@" 10
	_print_log 9 STDI "$_CONF_INSTALL_C_STDIN" "$_CONF_INSTALL_BEEP_STDIN" "$1 $3"
	read -r $2
}
_read_ifs() {
	stty -echo
	_read_if "$@"
	stty echo
}
_continue_if() {
	_read_if "$1" _PROCEED "$2"
	if [ -z "$_PROCEED" ]; then
		_DEFAULT=$(printf '%s' $2 | awk -F'/' {'print$1'})
		_PROCEED=$_DEFAULT
	fi
	_PROCEED=$(printf '%s' "$_PROCEED" | tr '[:lower:]' '[:upper:]')
	if [ $_PROCEED = "N" ]; then
		return 1
	fi
	return 0
}
_() {
	local _successfulExitStatus=0
	if [ -n "$_SUCCESSFUL_EXIT_STATUS" ]; then
		_successfulExitStatus=$_SUCCESSFUL_EXIT_STATUS
		unset _SUCCESSFUL_EXIT_STATUS
	fi
	_info "## $*"
	if [ -z "$_DRY_RUN" ]; then
		"$@"
		local _exit_status=$?
		if [ $_exit_status -ne $_successfulExitStatus ]; then
			if [ -n "$_ON_FAILURE" ]; then
				$_ON_FAILURE
				return
			fi
			if [ -z "$_WARN_ON_ERROR" ]; then
				_error "Previous cmd failed" $_exit_status
			else
				unset _WARN_ON_ERROR
				_warn "Previous cmd failed - $* - $_exit_status"
				_ENVIRONMENT_FILE=$(mktemp -t error) _environment_dump
				return $_exit_status
			fi
		fi
	fi
}
_optional_include() {
	if [ -e $1 ]; then
		. $1
	else
		_debug "_optional_include: $1 does NOT exist"
	fi
}
_configure() {
	_optional_include $1
}
_error() {
	if [ $# -ge 2 ]; then
		_EXIT_STATUS=$2
	else
		_EXIT_STATUS=1
	fi
	_EXIT_LOG_LEVEL=4
	_EXIT_STATUS_CODE="ERR"
	_EXIT_COLOR_CODE="$_CONF_INSTALL_C_ERR"
	_EXIT_BEEP="$_CONF_INSTALL_BEEP_ERR"
	_EXIT_MESSAGE="$1 ($_EXIT_STATUS)"
	_defer _environment_dump
	exit $_EXIT_STATUS
}
_success() {
	_EXIT_STATUS=0
	_EXIT_LOG_LEVEL=3
	_EXIT_STATUS_CODE="SCS"
	_EXIT_COLOR_CODE="$_CONF_INSTALL_C_SCS"
	_EXIT_BEEP="$_CONF_INSTALL_BEEP_SCS"
	_EXIT_MESSAGE="$1"
	exit 0
}
_contains_argument() {
	local _key=$1
	shift
	for _ARG in "$@"; do
		case $_ARG in
		$_key)
			return 0
			;;
		esac
	done
	return 1
}
_write() {
	if [ -z "$1" ]; then
		_error "filename cannot be empty."
	fi
	$_SUDO_CMD mkdir -p $(dirname "$1")
	$_SUDO_CMD tee -a "$1" >/dev/null
}
_print_help() {
	if [ -e $2 ]; then
		_info "$1:"
		cat $2
		printf '\n'
	fi
}
_print_help_and_exit() {
	_print_help 'system-wide options' $_CONF_INSTALL_LIBRARY_PATH/install/help/default
	if [ "$_APPLICATION_NAME" != "install" ]; then
		_print_help $_APPLICATION_NAME $_CONF_INSTALL_LIBRARY_PATH/$_APPLICATION_NAME/help/default
		_print_help "$_APPLICATION_NAME/$_APPLICATION_CMD" $_CONF_INSTALL_LIBRARY_PATH/$_APPLICATION_NAME/help/$_APPLICATION_CMD
	fi
	exit 0
}
_init_logging() {
	unset _LOGFILE
	case $_CONF_INSTALL_LOG_LEVEL in
	0)
		local logfile=$(_mktemp debug)
		_warn "Writing debug contents to: $logfile"
		_set_logfile "$logfile"
		set -x
		;;
	esac
}
_set_logfile() {
	if [ -n "$1" ]; then
		_LOGFILE=$1
		mkdir -p $(dirname $1)
		exec >>$1
		exec 2>>$1
	fi
}
_reset_logging() {
	exec >&7
	exec 2>&8
}
_alert() {
	_print_log 5 ALRT "$_CONF_INSTALL_C_ALRT" "$_CONF_INSTALL_BEEP_ALRT" "$1"
	local recipients="$_OPTN_INSTALL_ALERT_RECIPIENTS"
	local subject="Alert: $0 - $1"
	if [ -z "$recipients" ]; then
		_warn "recipients is empty, aborting"
		return 1
	fi
	_mail "$recipients" "$subject" "$2"
}
_warn() {
	_print_log 3 WRN "$_CONF_INSTALL_C_WRN" "$_CONF_INSTALL_BEEP_WRN" "$1"
}
_info() {
	_print_log 2 INF "$_CONF_INSTALL_C_INFO" "$_CONF_INSTALL_BEEP_INFO" "$1"
}
_detail() {
	_print_log 2 DTL "$_CONF_INSTALL_C_DETAIL" "$_CONF_INSTALL_BEEP_DETAIL" "$1"
}
_debug() {
	_print_log 1 DBG "$_CONF_INSTALL_C_DEBUG" "$_CONF_INSTALL_BEEP_DEBUG" "$1"
}
_do_log() {
	:
}
_colorize_text() {
	printf '\033[%s%s\033[0m' "$1" "$2"
}
_sed_remove_nonprintable_characters() {
	sed -e 's/[^[:print:]]//g'
}
_print_log() {
	if [ -z "$5" ]; then
		if test ! -t 0; then
			cat - | _sed_remove_nonprintable_characters |
				while read _line; do
					_print_log $1 $2 $3 $4 "$_line"
				done
			return
		fi
		return
	fi
	local _level=$1
	local _slevel=$2
	local _color=$3
	local _tone=$4
	local _message="$5"
	if [ $_level -lt $_CONF_INSTALL_LOG_LEVEL ]; then
		return
	fi
	[ -n "$_LOGGING_CONTEXT" ] && _message="$_LOGGING_CONTEXT - ${_LOG_INDENT}$_message"
	local _message_date_time=$(date +"$_CONF_INSTALL_DATE_FORMAT")
	if [ $_BACKGROUNDED ] && [ $_OPTN_INSTALL_BACKGROUND_NOTIFICATION_METHOD ]; then
		$_OPTN_INSTALL_BACKGROUND_NOTIFICATION_METHOD "$_slevel" "$_message" &
	fi
	_do_log "$_level" "$_slevel" "$_message"
	[ -n "$_tone" ] && _beep "$_tone"
	_log_non_interactive "$_slevel" "$_message_date_time" "${_LOG_INDENT}$_message"
	_log_interactive "$_color" "$_slevel" "$_message_date_time" "${_LOG_INDENT}$_message"
}
_add_logging_context() {
	if [ -z "$1" ]; then
		return 1
	fi
	if [ -z "$_LOGGING_CONTEXT" ]; then
		_LOGGING_CONTEXT="$1"
		return
	fi
	_LOGGING_CONTEXT="$_LOGGING_CONTEXT.$1"
}
_remove_logging_context() {
	if [ -z "$_LOGGING_CONTEXT" ]; then
		return 1
	fi
	case $_LOGGING_CONTEXT in
	*.*)
		_LOGGING_CONTEXT=$(printf '%s' "$_LOGGING_CONTEXT" | sed 's/\.[a-z0-9 _-]*$//')
		;;
	*)
		unset _LOGGING_CONTEXT
		;;
	esac
}
_increase_indent() {
	_LOG_INDENT="$_LOG_INDENT${_CONF_INSTALL_INDENT}"
}
_decrease_indent() {
	_LOG_INDENT=$(printf '%s' "$_LOG_INDENT" | sed -e "s/${_CONF_INSTALL_INDENT}$//")
	if [ ${#_LOG_INDENT} -eq 0 ]; then
		unset _LOG_INDENT
	fi
}
_reset_indent() {
	unset _LOG_INDENT
}
_log_non_interactive() {
	if [ $_NON_INTERACTIVE ] || [ $_LOGFILE ]; then
		if [ $_CONF_INSTALL_AUDIT -gt 0 ]; then
			printf >&$_NLOG_TARGET '%s %s %s\n' "$1" "$2" "$3"
		else
			printf >&$_NLOG_TARGET '%s\n' "$3"
		fi
		_syslog "$3"
	fi
}
_log_interactive() {
	[ $_NO_WRITE_STDERR ] && return
	_is_open $_LOG_TARGET || return
	if [ $_NON_INTERACTIVE ] && [ -z $_LOGFILE ]; then
		return
	fi
	if [ $_CONF_INSTALL_AUDIT -gt 0 ]; then
		printf >&$_LOG_TARGET '\033[%s%s \033[0m%s %s\n' "$1" "$2" "$3" "$4"
	else
		printf >&$_LOG_TARGET '\033[%s%s \033[0m\n' "$1" "$4"
	fi
}
_is_open() {
	(: >&"$1") 2>/dev/null
}
_log_app_init() {
	_log_level=debug
	[ $_NON_INTERACTIVE ] && {
		if [ $(basename $0 | grep -c '^_') -eq 0 ]; then
			_log_level=info
		fi
	}
	_log_app init
}
_log_app() {
	_$_log_level "$_APPLICATION_NAME:$_APPLICATION_CMD:$_APPLICATION_VERSION $_APPLICATION_BUILD_DATE / $_APPLICATION_INSTALL_DATE - $1 ($$)"
}
_syslog() {
	:
}
_mail() {
	if [ $# -lt 3 ]; then
		_warn "recipients[0], subject[1], message[2] is required - $# arguments provided"
		return 1
	fi
	local recipients=$(printf '%s' "$1" | tr '|' ' ')
	shift
	local subject="$1"
	shift
	local message="$1"
	shift
	printf "$message" | mail -s "$subject" $recipients
}
_on_exit() {
	[ $_EXIT ] && return 1
	_EXIT=0
	if [ -n "$_DEFERS" ]; then
		for _DEFER in $_DEFERS; do
			_call $_DEFER
		done
		unset _DEFERS
	fi
	_waitee_done
	if [ $_EXIT_STATUS -gt 0 ]; then
		_log_level=warn
	else
		_log_level=debug
	fi
	[ "$_EXIT_MESSAGE" ] && _print_log $_EXIT_LOG_LEVEL "$_EXIT_STATUS_CODE" "$_EXIT_COLOR_CODE" "$_EXIT_BEEP" "$_EXIT_MESSAGE"
	_log_app "exit"
	_on_exit_beep
}
_defer() {
	_DEFERS="${_DEFERS:+$_DEFERS }$1"
}
_on_exit_beep() {
	local current_time=$(date +%s)
	local timeout=$(($current_time + $_CONF_INSTALL_BEEP_TIMEOUT))
	if [ $current_time -le $timeout ]; then
		return 1
	fi
	local beep_code
	if [ $_EXIT_STATUS -gt 0 ]; then
		beep_code="$_CONF_INSTALL_BEEP_ERR"
	else
		beep_code="$_CONF_INSTALL_BEEP_SCS"
	fi
	_beep "$beep_code" &
}
_context_id_is_valid() {
	printf '%s' "$1" | $_CONF_INSTALL_GNU_GREP -Pq '^[a-zA-Z0-9_+-]+$' || _error "Context ID *MUST* only contain alphanumeric characters and +-: '^[a-zA-Z0-9_+-]+$'"
}
_init_application_context() {
	if [ -z "$_CONTEXT_VALIDATED" ]; then
		_context_id_is_valid "$_CONF_INSTALL_CONTEXT"
		_CONTEXT_VALIDATED=0
	fi
	_APPLICATION_CONTEXT_GROUP=$_CONF_INSTALL_RUN_PATH/$_CONF_INSTALL_CONTEXT
	_APPLICATION_CMD_DIR=$_APPLICATION_CONTEXT_GROUP/$_APPLICATION_NAME/$_APPLICATION_CMD
	_APPLICATION_PIPE=$_APPLICATION_CMD_DIR/$$
	_APPLICATION_PIPE_DIR=$(dirname $_APPLICATION_PIPE)
	mkdir -p $_APPLICATION_PIPE_DIR
	mkfifo $_APPLICATION_PIPE
	if [ "$_APPLICATION_NAME" != "install" ]; then
		_configure $_CONF_INSTALL_CONFIG_PATH/install
	fi
	_configure $_CONF_INSTALL_APPLICATION_CONFIG_PATH
	if [ -n "$_CONFIGURATIONS" ]; then
		local configure
		for configure in $_CONFIGURATIONS; do
			_configure $_CONF_INSTALL_CONFIG_PATH/$configure
		done
	fi
	$_CONF_INSTALL_WAITER_LEVEL "($_APPLICATION_CMD) Please use -w=$$"
}
_has_other_instances() {
	if [ $(find $_APPLICATION_CMD_DIR -type p -maxdepth 1 ! -name $$ | wc -l) -gt 0 ]; then
		return 0
	fi
	return 1
}
_waitee_done() {
	if [ -z "$_EXIT_STATUS" ]; then
		_EXIT_STATUS=0
	fi
	if [ -n "$_WAITEE" ] && [ -e $_APPLICATION_PIPE ]; then
		_info "$0 process completed, notifying ($_EXIT_STATUS)"
		printf '%s\n' "$_EXIT_STATUS" >$_APPLICATION_PIPE
		_info "$0 downstream process picked up"
	fi
	rm -f $_APPLICATION_PIPE
}
_waiter() {
	if [ -n "$_WAITER_PID" ]; then
		_UPSTREAM_APPLICATION_PIPE=$(find $_APPLICATION_CONTEXT_GROUP -type p -name $_WAITER_PID 2>/dev/null | head -1)
		if [ -z "$_UPSTREAM_APPLICATION_PIPE" ]; then
			_error "$_WAITER_PID not found"
		fi
		if [ ! -e $_UPSTREAM_APPLICATION_PIPE ]; then
			_warn "$_UPSTREAM_APPLICATION_PIPE does not exist, did upstream start?"
			return
		fi
		_info "Waiting for upstream to complete: $_WAITER_PID"
		while [ 1 ]; do
			if [ ! -e $_UPSTREAM_APPLICATION_PIPE ]; then
				_error "Upstream pipe no longer exists"
			fi
			_UPSTREAM_APPLICATION_STATUS=$(timeout $_CONF_INSTALL_WAIT_INTERVAL cat $_UPSTREAM_APPLICATION_PIPE 2>/dev/null)
			local _UPSTREAM_STATUS=$?
			if [ $_UPSTREAM_STATUS -eq 0 ]; then
				if [ -z "$_UPSTREAM_APPLICATION_STATUS" ] || [ $_UPSTREAM_APPLICATION_STATUS -gt 0 ]; then
					_error "Upstream exited with error ($_UPSTREAM_APPLICATION_STATUS)"
				fi
				_warn "Upstream finished: $_UPSTREAM_APPLICATION_PIPE ($_UPSTREAM_STATUS)"
				break
			fi
			_detail " Upstream is still running: $_UPSTREAM_APPLICATION_PIPE ($_UPSTREAM_STATUS)"
		done
	fi
}
_kill_all() {
	_do_kill_all $_APPLICATION_PIPE_DIR
}
_kill_all_group() {
	_do_kill_all $_APPLICATION_CONTEXT_GROUP
}
_do_kill_all() {
	for _EXISTING_APPLICATION_PIPE in $(find $1 -type p -not -name $$); do
		_kill $(basename $_EXISTING_APPLICATION_PIPE)
	done
}
_kill() {
	_warn "Killing $1"
	kill -TERM $1
}
_list() {
	_list_pid_infos $_APPLICATION_PIPE_DIR
}
_list_group() {
	_list_pid_infos $_APPLICATION_CONTEXT_GROUP
}
_list_pid_infos() {
	_info "Running processes:"
	_EXECUTABLE_NAME_SED_SAFE=$(_sed_safe $0)
	for _EXISTING_APPLICATION_PIPE in $(find $1 -type p -not -name $$); do
		_list_pid_info
	done
}
_list_pid_info() {
	_TARGET_PID=$(basename $_EXISTING_APPLICATION_PIPE)
	_TARGET_PS_DTL=$(ps -o command -p $_TARGET_PID | sed 1d | sed -e "s/^.*$_EXECUTABLE_NAME_SED_SAFE/$_EXECUTABLE_NAME_SED_SAFE/")
	_info " $_TARGET_PID - $_TARGET_PS_DTL"
}
_parent_processes() {
	[ -n "$_PARENT_PROCESSES_FUNCTION" ] && $_PARENT_PROCESSES_FUNCTION
}
_parent_processes_pgrep() {
	pgrep -P $1
}
_init_pager() {
	if [ "$_CONF_INSTALL_NO_PAGER" = "1" ]; then
		PAGER=cat
	fi
}
. $_CONF_INSTALL_LIBRARY_PATH/$_APPLICATION_NAME
_app_default_bootstrap() {
	:
}
_app_default_install() {
	local xdm_mime_sudo
	if [ -n $_USER ]; then
		xdm_mime_sudo="$_SUDO_CMD -u $_USER"
	fi
	$xdm_mime_sudo xdg-mime default $1.desktop $2
}
_app_default_uninstall() {
	:
}
_app_default_is_installed() {
	:
}
_app_default_enabled() {
	return 0
}
_prepare_ssh_conf() {
	$sudo mkdir -p $1/.ssh/socket
	$sudo chmod 700 $1/.ssh/socket
	printf 'StrictHostKeyChecking no\n' | $sudo tee -a $1/.ssh/config >/dev/null
	if [ -n "$_HOST_IP" ]; then
		_ssh_init_bastion_host $1
	fi
	if [ -e /tmp/HOST-SSH ]; then
		_info "Copying host ssh -> $1/.ssh"
		$sudo cp /tmp/HOST-SSH/id* $1/.ssh
	fi
	if [ "$2" != "root" ]; then
		$sudo chown -R $2:$2 $1/.ssh
	fi
}
_ssh_init_bastion_host() {
	printf 'Host host-proxy\n' | $sudo tee -a $1/.ssh/config >/dev/null
	printf ' Hostname %s\n' "$_HOST_IP" | $sudo tee -a $1/.ssh/config >/dev/null
	printf ' User root\n' | $sudo tee -a $1/.ssh/config >/dev/null
	printf 'Host git\n' | $sudo tee -a $1/.ssh/config >/dev/null
	printf ' ProxyJump host-proxy:%s\n' $_SSH_HOST_PORT | $sudo tee -a $1/.ssh/config >/dev/null
	printf ' User root\n' | $sudo tee -a $1/.ssh/config >/dev/null
	printf 'Host freebsd-package-cache\n' | $sudo tee -a $1/.ssh/config >/dev/null
	printf ' ProxyJump host-proxy:%s\n' $_SSH_HOST_PORT | $sudo tee -a $1/.ssh/config >/dev/null
	printf ' User root\n' | $sudo tee -a $1/.ssh/config >/dev/null
	printf 'Host %s\n' "$_CONF_FREEBSD_INSTALLER_PACKAGE_CACHE" | $sudo tee -a $1/.ssh/config >/dev/null
	printf ' ProxyJump host-proxy:%s\n' $_SSH_HOST_PORT | $sudo tee -a $1/.ssh/config >/dev/null
	printf ' User root\n' | $sudo tee -a $1/.ssh/config >/dev/null
	if [ "$_CONF_FREEBSD_INSTALLER_PACKAGE_CACHE" != "$_CONF_FREEBSD_INSTALLER_GIT_MIRROR" ]; then
		printf 'Host %s\n' "$_CONF_FREEBSD_INSTALLER_GIT_MIRROR" | $sudo tee -a $1/.ssh/config >/dev/null
		printf ' ProxyJump host-proxy\n' | $sudo tee -a $1/.ssh/config >/dev/null
		printf ' User root\n' | $sudo tee -a $1/.ssh/config >/dev/null
	fi
	$sudo chmod 600 $1/.ssh/config
}
_user_bootstrap() {
	$_SUDO_CMD mkdir -p /root/.ssh/socket
	$_SUDO_CMD chmod -R 700 /root/.ssh/socket
	app-install configuration
}
_user_install() {
	_users_add "$1"
}
_user_uninstall() {
	. "$1"
	_require "$username" "username"
	rmuser -y $username
}
_user_is_installed() {
	:
}
_user_enabled() {
	return 0
}
_users_add_argument() {
	if [ -n "$2" ]; then
		user_options="$user_options $1 $2"
	fi
}
_users_add() {
	. $1
	if [ "root" != "$username" ]; then
		$_SUDO_CMD pw user show $username >/dev/null 2>&1 || {
			_info "### Add User: $1: $username"
			user_options="-n $username -m"
			_users_add_argument "-g" "$gid"
			_users_add_argument "-G" "$grouplist"
			_users_add_argument "-s" "$shell"
			_users_add_argument "-u" "$uid"
			$_SUDO_CMD pw useradd $user_options
		}
	else
		_info "# Setting shell to $shell for root"
		$_SUDO_CMD chsh -s "$shell"
	fi
	if [ -n "$password" ]; then
		_info "# Setting password $shell for $username"
		$_SUDO_CMD chpass -p "$password" $username
	fi
	_users_configure
	_users_cleanup
}
_users_get_data() {
	printf '%s\n' "$username" | tr ' ' '\n'
}
_users_cleanup() {
	unset user_options username gid grouplist shell uid password system
}
_users_configure() {
	local user_home=$(grep "^$username:" /etc/passwd | cut -f6 -d':')
	sudo=$SUDO_CMD _prepare_ssh_conf $user_home $username
	local original_pwd=$PWD
	cd /tmp
	if [ -n "$system" ]; then
		_warn "$username is a system user, bypassing configuration"
	else
		_warn "_CONF_FREEBSD_INSTALLER_HOSTNAME:$_CONF_FREEBSD_INSTALLER_HOSTNAME"

		_WARN_ON_ERROR=1 _NON_INTERACTIVE=1 _FREEBSD_INSTALLER=1 _NO_WRITE_STDERR=1 _ $_SUDO_CMD --preserve-env=_CONF_GIT_MIRROR,_WARN_ON_ERROR,_LOG_TARGET,_NON_INTERACTIVE,_CONF_FREEBSD_INSTALLER_HOSTNAME,_NO_WRITE_STDERR,http_proxy,https_proxy -H -u $username conf restore || {
			_user_configure_debug
		}
	fi
	cd $original_pwd
}
_user_configure_debug() {
	_warn "Error restoring configuration for $username"
	cat $user_home/.ssh/id_ecdsa.pub
	cat $user_home/.ssh/authorized_keys
	cat $user_home/.ssh/config
}
_pkg_install() {
	_pkg_bootstrap
	_USE_SUDO=1 _PRESERVE_ENV=1 _timeout $_CONF_INSTALL_STEP_TIMEOUT "FreeBSD pkg install" pkg $_PKG_OPTIONS install -yq $@ >/dev/null
}
_pkg_uninstall() {
	_pkg_bootstrap
	_USE_SUDO=1 _PRESERVE_ENV=1 _timeout $_CONF_INSTALL_STEP_TIMEOUT "FreeBSD pkg uninstall" pkg $_PKG_OPTIONS delete -yq $@ >/dev/null
}
_pkg_is_installed() {
	_pkg_bootstrap
	pkg $_PKG_OPTIONS info -e $1 2>/dev/null
}
_pkg_bootstrap() {
	[ $_PKG_BOOTSTRAPPED ] && return
	ASSUME_ALWAYS_YES=yes
	_PKG_BOOTSTRAPPED=1
	if [ -n "$_ROOT" ] && [ "$_ROOT" != "/" ]; then
		_pkg_cache_already_mounted || _pkg_cache_mount
		_PKG_OPTIONS="-r $_ROOT"
	fi
	_pkg_enable_proxy
	_USE_SUDO=1 _PRESERVE_ENV=1 _timeout $_CONF_INSTALL_STEP_TIMEOUT "FreeBSD pkg bootstrap" pkg $_PKG_OPTIONS update -q
}
_pkg_cache_already_mounted() {
	mount | awk {'print$3'} | grep -q "$_ROOT/var/cache/pkg$"
}
_pkg_cache_mount() {
	$_SUDO_CMD mkdir -p $_ROOT/var/cache/pkg
	_info "Mounting host's package cache"
	$_SUDO_CMD mount -t nullfs /var/cache/pkg $_ROOT/var/cache/pkg || {
		_warn "Error mounting host's package cache"
		_warn "pkg cache mounts: $(mount | awk {'print$3'} | grep \"^$_ROOT/var/cache/pkg$\")"
		_warn "mounts: $(mount | awk {'print$3'})"
		return 1
	}
	_defer _pkg_cache_umount
}
_pkg_cache_umount() {
	umount $_ROOT/var/cache/pkg
}
_pkg_bootstrap_platform() {
	_pkg_bootstrap
}
_pkg_bootstrap_is_pkg_available() {
	return 0
}
_pkg_enable_proxy() {
	if [ -z "$http_proxy" ]; then
		return
	fi
	[ $_PKG_PROXY_ENABLED ] && return
	_PKG_PROXY_ENABLED=1
	_defer _pkg_disable_proxy
	_warn "[install] Configuring pkg to use an HTTP proxy: $http_proxy"
	local _updated_pkg_conf=$(mktemp)
	if [ -e $_ROOT/usr/local/etc/pkg.conf ]; then
		grep -v '^pkg_env' $_ROOT/usr/local/etc/pkg.conf >$_updated_pkg_conf
		mv $_updated_pkg_conf $_ROOT/usr/local/etc/pkg.conf
	fi
	mkdir -p $_ROOT/usr/local/etc
	printf 'pkg_env: { http_proxy: "%s"}\n' "$http_proxy" >>$_ROOT/usr/local/etc/pkg.conf
}
_pkg_disable_proxy() {
	if [ -z "$http_proxy" ]; then
		return
	fi
	unset _PKG_PROXY_ENABLED
	_warn "[freebsd-installer] Disabling HTTP proxy: $http_proxy"
	$_CONF_INSTALL_GNU_SED -i "s/^pkg_env/#pkg_env/" $_ROOT/usr/local/etc/pkg.conf
}
_pkg_setup_ssh_package_cache() {
	if [ $# -lt 1 ]; then
		_error "SSH host is required to setup ssh cache"
	fi
	_pkg_install fusefs-sshfs || _error "Error installing fusefs-sshfs"
	kldload /boot/kernel/fusefs.ko
	mv /var/cache/pkg /var/cache/pkg.local
	mkdir -p /var/cache/pkg
	sshfs -o StrictHostKeyChecking=no :/var/cache/pkg /var/cache/pkg
	mv -f /var/cache/pkg.local/* /var/cache/pkg
	rm -rf /var/cache/pkg.local
	_defer _cleanup_package_cache $1
}
_pkg_cleanup_ssh_package_cache() {
	umount /var/cache/pkg
	kldunload fusefs
}
_is_latest() {
	if [ ! -e $_INSTALL_LIBRARY_PATH/$1 ]; then
		return 1
	fi
	if [ ! -e $_INSTALL_LIBRARY_PATH/$1/.metadata ]; then
		return 1
	fi
	_INSTALLED_APPLICATION_GIT_URL=$(grep _APPLICATION_GIT_URL $_INSTALL_LIBRARY_PATH/$1/.metadata | cut -f2 -d= | tr -d '"')
	_LATEST_APPLICATION_VERSION=$(git ls-remote $_INSTALLED_APPLICATION_GIT_URL 2>/dev/null | head -1 | cut -f1)
	_INSTALLED_APPLICATION_VERSION=$(grep _APPLICATION_VERSION $_INSTALL_LIBRARY_PATH/$1/.metadata | cut -f2 -d. | tr -d '"')
	if [ "$_LATEST_APPLICATION_VERSION" != "$_INSTALLED_APPLICATION_VERSION" ]; then
		return 1
	fi
	return 0
}
_setup_project() {
	_clone
	_is_latest $_TARGET_APPLICATION_NAME && {
		if [ -z "$_INSTALL_FORCE" ]; then
			_warn "Latest version of app is already installed: $_TARGET_APPLICATION_NAME"
			return 1
		fi
	}
	_is_app
	_TARGET_PLATFORM=$_PLATFORM
	_application_settings
	_application_defaults $_TARGET_PLATFORM
	#_validate_required_conf
	[ $_OPTN_INSTALL_BYPASS_UNINSTALL ] || _uninstall
	_prepare_target
	_bootstrap
	_metadata_write_app
	_install $_TARGET_PLATFORM
	_dependencies
	_setup setup
	_features $_TARGET_PLATFORM/feature
	_setup post-setup
	_info "$_TARGET_APPLICATION_NAME - Completed installation"
}
_is_app() {
	[ ! -e .app ] && _error ".app does NOT exist, is this an app ($PWD)" 3
}
_is_clean() {
	[ -n "$(git status --porcelain)" ] && _error "Working directory is dirty, please commit changes first"
}
_dependencies() {
	if [ ! -e dependencies ]; then
		_info "$_TARGET_APPLICATION_NAME - no dependencies"
		return
	fi
	local oldwd=$PWD
	_info "$_TARGET_APPLICATION_NAME - working on dependencies"
	cd /tmp
	_increase_indent
	local dependency
	for dependency in $($_CONF_INSTALL_GNU_GREP -Pv "(^$|^#)" $oldwd/dependencies 2>/dev/null); do
		if [ -n "$dependency" ]; then
			_detail "dependency: $dependency"
			_is_latest $dependency && _detail "$dependency is already up-to-date" || {
				app-install $dependency
			}
		else
			_warn "Dependency was empty"
		fi
	done
	_decrease_indent
	cd $oldwd
	_info "$_TARGET_APPLICATION_NAME - completed dependencies"
}
_features() {
	if [ ! -e $1 ]; then
		if [ -z "$_WARN" ]; then
			_warn "No features to install"
		fi
		return 1
	fi
	_info "Installing features"
	local feature
	for feature in $(find $1 -type d \( -name '*.feature' -and ! -path '*/*.feature/*' \) | sort -u); do
		local feature_base_name=$(basename $feature)
		local parent_feature_name=$_FEATURE_NAME
		local feature_error
		_FEATURE_NAME=$(printf '%s' $feature_base_name | $_CONF_INSTALL_GNU_SED 's/[a-z]/\U&/g' | tr '-' '_' | sed -e "s/\.FEATURE//")
		if [ -n "$parent_feature_name" ]; then
			_FEATURE_NAME=${parent_feature_name}_$_FEATURE_NAME
		fi
		_application_defaults $feature
		_is_feature_enabled $_FEATURE_NAME || {
			_FEATURE_DISABLED=1 _disable_feature $_FEATURE_NAME
			unset _FEATURE_NAME _FEATURE_DISABLED
			continue
		}
		_feature $feature || {
			_disable_feature $_FEATURE_NAME
			feature_error=1
		}
		if [ -z "$feature_error" ]; then
			_FEATURE_MESSAGE="children " _WARN=0 _features $feature/feature
		fi
		unset _FEATURE_NAME _FEATURE_DISABLED
	done
}
_feature() {
	_detail "  $_FEATURE_NAME"
	_install $1 || return $?
	_feature_setup $1 || return $?
}
_feature_setup() {
	local setup_script
	for setup_script in $(find $1 -type f \( -path "$1/setup/*" \) | sort -u); do
		_setup_run_script $setup_script || return 1
	done
}
_do_clone() {
	if [ -n "$1" ] && [ -e $1 ]; then
		local opwd=$PWD
		cd $1
		git pull
		cd $opwd
		return
	fi
	if [ -n "$project_name" ]; then
		git clone $project_name $1 >/dev/null 2>&1 && return
	fi
	local repository_url
	for repository_url in $git_mirrors; do
		local project_url=$repository_url
		if [ -n "$project_name" ]; then
			project_url=$project_url/$project_name
		fi
		_git_does_repository_exist $project_url || continue
		_detail "Using $project_url -> $1"
		git clone $project_url $1 >/dev/null 2>&1 && return
	done
	return 1
}
_clone() {
	_info "Git Clone: $_TARGET_APPLICATION_NAME"
	git_mirrors=$_CONF_INSTALL_APP_REGISTRY_GIT_URL _do_clone $_CONF_INSTALL_DATA_REGISTRY_PATH && {
		cd $_CONF_INSTALL_DATA_REGISTRY_PATH
		cd $_TARGET_APPLICATION_NAME || _error "$_TARGET_APPLICATION_NAME does not exist in the registry"
		_detail "Cloned registry and $_TARGET_APPLICATION_NAME exists"
		return
	}
	_error "Unable to clone: $_TARGET_APPLICATION_GIT_URL in any of $_CONF_INSTALL_APP_REGISTRY_GIT_URL"
}
_git_does_repository_exist() {
	case $1 in
	http*)
		local http_status_code=$(curl -Is $1 2>/dev/null | head -n 1 | cut -d$' ' -f2)
		if [ $http_status_code -lt 400 ]; then
			return 0
		fi
		;;
	*:*)
		git ls-remote $1 >/dev/null 2>&1 && return 0
		;;
	*)
		if [ -e $1 ]; then
			return 0
		fi
		;;
	esac
	return 1
}
_require_ssh_keys() {
	if [ $(find ~/.ssh -maxdepth 1 -type f -name '*.pub' | wc -l) -eq 0 ]; then
		_error "SSH public key is required"
	fi
}
_prepare_target() {
	$_SUDO_CMD rm -rf $_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME
	$_SUDO_CMD mkdir -p $_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME
}
_install() {
	$_SUDO_CMD mkdir -p $_INSTALL_BIN_PATH
	_install_help $1
	local installed_files=$(mktemp)
	_install_cmds $1 $installed_files
	_install_uninstall $1
	_install_files_files $installed_files $1
	_install_update_files $installed_files
	if [ -e $1/.metadata ]; then
		cat $1/.metadata | _write "$_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME/.metadata"
	fi
}
_install_files() {
	if [ -e $1 ] && [ $(find $1 -type f | wc -l) -gt 0 ]; then
		if [ -n "$3" ]; then
			local files_sed_safe=$(_sed_safe $1)
			local target_sed_safe=$(_sed_safe $2)
			find $1 -type f | sed -e "s/^$files_sed_safe/$target_sed_safe/" >>$3
		fi
		$_SUDO_CMD mkdir -p $2
		tar -c $_TAR_ARGS -C $1 . | $_SUDO_CMD tar -xop $_TAR_ARGS -C $2
	fi
}
_install_help() {
	_install_files $1/help $_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME/help
}
_install_cmds() {
	if [ "$_TARGET_APPLICATION_NAME" = "$_APPLICATION_NAME" ]; then
		printf '%s\n' "$_INSTALL_BIN_PATH/$(basename $0)" >>$2
	fi
	_install_files $1//bin $_INSTALL_BIN_PATH $2
}
_install_uninstall() {
	_install_files $1/uninstall $_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME/uninstall
}
_install_files_files() {
	_install_files $2/files/_ROOT_ $_ROOT $1
	_install_files $2/files/_APPLICATION_ROOT_ "$_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME" $1
}
_install_update_files() {
	if [ -n "$_ROOT" ] && [ "$_ROOT" != "/" ]; then
		local root_sed_safe=$(_sed_safe $_ROOT)
		$_CONF_INSTALL_GNU_SED -i "s/^$root_sed_safe//" $1
	fi
	cat $1 | _write "$_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME/.files"
	rm -f $1
	$_SUDO_CMD chmod 444 $_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME/.files
}
_metadata_write_app() {
	printf '_APPLICATION_GIT_URL="%s"\n' "$_TARGET_APPLICATION_GIT_URL" | _metadata_write
	printf '_APPLICATION_INSTALL_DATE="%s"\n' "$_TARGET_APPLICATION_INSTALL_DATE" | _metadata_write
	printf '_APPLICATION_BUILD_DATE="%s"\n' "$_TARGET_APPLICATION_BUILD_DATE" | _metadata_write
	printf '_APPLICATION_VERSION="%s"\n' "$_TARGET_APPLICATION_VERSION" | _metadata_write
}
_metadata_write() {
	$_SUDO_CMD tee -a $_TARGET_APPLICATION_METADATA_PATH >/dev/null 2>&1
}
_install_metadata_write() {
	$_SUDO_CMD tee -a $_APPLICATION_METADATA_PATH >/dev/null 2>&1
}
_metadata_write_platform() {
	env | grep '^_BOOTSTRAP_' | _install_metadata_write
}
_expect_install() {
	_timeout $_CONF_INSTALL_STEP_TIMEOUT "expect install" $1 >/dev/null 2>&1
}
_expect_uninstall() {
	_warn "expect uninstall - Not implemented"
}
_expect_is_installed() {
	return 1
}
_expect_is_file() {
	return 0
}
_go_bootstrap() {
	_go_bootstrap_is_go_available || {
		_go_bootstrap_platform
		_go_bootstrap_is_go_available || _GO_DISABLED=1
	}
	_go_setup_proxy
}
_go_bootstrap_is_go_available() {
	which go >/dev/null 2>&1
}
_go_install() {
	_USE_SUDO=1 _PRESERVE_ENV=1 GO111MODULE=on _timeout $_CONF_INSTALL_STEP_TIMEOUT "go install" go install $_GO_OPTIONS "$@" || {
		_warn "go install failed: $_GO_OPTIONS $@"
		_warn "  http_proxy: $http_proxy"
		_warn "  git  proxy: $(git config --global http.proxy)"
	}
}
_go_update() {
	:
}
_go_uninstall() {
	_USE_SUDO=1 _timeout $_CONF_INSTALL_STEP_TIMEOUT "go uninstall" go uninstall "$@"
}
_go_is_installed() {
	return 1
}
_go_is_file() {
	return 1
}
_go_setup_proxy() {
	if [ -n "$http_proxy" ]; then
		_warn "Configuring git to use an HTTP proxy: $http_proxy"
		git config --global http.proxy $http_proxy
		git config --global https.proxy $http_proxy
		#GOPROXY="$http_proxy"
		_defer _go_clear_proxy
	fi
}
_go_clear_proxy() {
	_warn "Reverting git HTTP proxy: $http_proxy"
	git config --unset --global http.proxy
	git config --unset --global https.proxy
	#unset GOPROXY
}
_npm_bootstrap() {
	_npm_bootstrap_is_npm_available || {
		_npm_bootstrap_platform
		_npm_bootstrap_is_npm_available || _NPM_DISABLED=1
	}
	_npm_setup_proxy
}
_npm_bootstrap_is_npm_available() {
	which npm >/dev/null 2>&1
}
_npm_install() {
	_USE_SUDO=1 _timeout $_CONF_INSTALL_STEP_TIMEOUT "npm install" npm install -s -g "$@"
}
_npm_uninstall() {
	_USE_SUDO=1 _timeout $_CONF_INSTALL_STEP_TIMEOUT "npm uninstall" npm uninstall -s -g "$@"
}
_npm_is_installed() {
	npm list -g $1 >/dev/null
}
_npm_is_file() {
	return 1
}
_npm_setup_proxy() {
	if [ -n "$http_proxy" ]; then
		_warn "Configuring NPM to use an HTTP proxy: $http_proxy"
		npm config set proxy $http_proxy
		npm config set https-proxy $https_proxy
		_defer _npm_clear_proxy
	fi
}
_npm_clear_proxy() {
	_warn "Reverting NPM HTTP proxy: $http_proxy"
	npm config rm proxy
	npm config rm https-proxy
}
_package_bootstrap() {
	_${_INSTALL_INSTALLER}_bootstrap_is_${_INSTALL_INSTALLER}_available || {
		_${_INSTALL_INSTALLER}_bootstrap_platform
		_${_INSTALL_INSTALLER}_bootstrap_is_${_INSTALL_INSTALLER}_available || _PACKAGE_DISABLED=1
	}
	_${_INSTALL_INSTALLER}_bootstrap
}
_package_bootstrap_is_package_available() {
	_${_INSTALL_INSTALLER}_bootstrap_is_package_available
}
_package_install() {
	_package_enabled || {
		_warn "$_INSTALL_INSTALLER is disabled"
		return
	}
	local packages
	local package
	for package in "$@"; do
		_package_is_installed $package || {
			if [ -n "$packages" ]; then
				packages="$packages $package"
			else
				packages="$package"
			fi
		}
	done
	if [ -n "$packages" ]; then
		_${_INSTALL_INSTALLER}_install "$packages"
	fi
}
_package_uninstall() {
	_package_enabled || {
		_warn "$_INSTALL_INSTALLER is disabled"
		return
	}
	_${_INSTALL_INSTALLER}_uninstall "$@"
}
_package_is_installed() {
	_${_INSTALL_INSTALLER}_is_installed "$@"
}
_package_is_file() {
	return 1
}
_package_enabled() {
	if [ -z "$_PACKAGE_DISABLED" ] || [ $_PACKAGE_DISABLED -eq 0 ]; then
		return 0
	fi
	return 1
}
_pypi_bootstrap() {
	_pypi_bootstrap_is_pypi_available || {
		_pypi_bootstrap_platform
		_pypi_bootstrap_is_pypi_available || _PYPI_DISABLED=1
	}
}
_pypi_bootstrap_is_pypi_available() {
	which pip >/dev/null 2>&1
}
_pypi_install() {
	_USE_SUDO=1 _timeout $_CONF_INSTALL_STEP_TIMEOUT "pypi install" pip install -U --no-input "$@" >/dev/null
}
_pypi_uninstall() {
	_USE_SUDO=1 _timeout $_CONF_INSTALL_STEP_TIMEOUT "pypi uninstall" pip uninstall -y "$@" >/dev/null
}
_pypi_is_installed() {
	_error "PIP - is installed - NOT IMPLEMENTED"
}
_pypi_is_file() {
	return 1
}
_run_install() {
	_timeout $_CONF_INSTALL_STEP_TIMEOUT "run install" sh $1
}
_run_uninstall() {
	_warn "run uninstall - Not implemented"
}
_run_is_installed() {
	return 1
}
_run_is_file() {
	return 0
}
_rust_bootstrap() {
	_rust_bootstrap_is_rust_available || {
		_rust_bootstrap_platform
		_rust_bootstrap_is_rust_available || _RUST_DISABLED=1
	}
}
_rust_bootstrap_is_rust_available() {
	which cargo >/dev/null 2>&1
}
_rust_install() {
	_USE_SUDO=1 _timeout $_CONF_INSTALL_STEP_TIMEOUT "rust install" cargo install "$@"
}
_rust_update() {
	_USE_SUDO=1 _timeout $_CONF_INSTALL_STEP_TIMEOUT "rust update" cargo update "$@"
}
_rust_uninstall() {
	_USE_SUDO=1 _timeout $_CONF_INSTALL_STEP_TIMEOUT "rust uninstall" cargo uninstall "$@"
}
_rust_is_installed() {
	_error "RUST - is installed - NOT IMPLEMENTED"
}
_rust_is_file() {
	return 1
}
_user_bootstrap() {
	:
}
_user_install() {
	:
}
_user_uninstall() {
	:
}
_user_is_installed() {
	return 1
}
_user_is_file() {
	return 0
}
_user_enabled() {
	return 1
}
_bootstrap() {
	if [ "$_APPLICATION_NAME" = "$_TARGET_APPLICATION_NAME" ]; then
		_metadata_write_platform
	fi
	if [ -z "$_PLATFORM_PACKAGES" ]; then
		return 1
	fi
	if [ -n "$_BOOTSTRAP_PLATFORM_PACKAGES_INSTALLED" ]; then
		return 2
	fi
	_info "Installing pre-requisites"
	_setup_run_do_bootstrap package
	_package_install $_PLATFORM_PACKAGES
	_BOOTSTRAP_PLATFORM_PACKAGES_INSTALLED=1
	_metadata_write_platform
}
_npm_bootstrap_platform() {
	_package_install $_NPM_PACKAGE
}
_rust_bootstrap_platform() {
	_package_install $_RUST_PACKAGE
}
_pypi_bootstrap_platform() {
	_package_install $_PYPI_PACKAGE
}
_go_bootstrap_platform() {
	_package_install $_GO_PACKAGE
}
_settings_init() {
	if [ -z "$_ROOT" ]; then
		_ROOT=/
	fi
	_ROOT=$(_readlink $_ROOT)
	_info "Using root directory: $_ROOT"
	_INSTALL_BIN_PATH=$(_USE_SUDO=1 _readlink $_ROOT/$_CONF_INSTALL_BIN_PATH)
	_INSTALL_LIBRARY_PATH=$(_USE_SUDO=1 _readlink $_ROOT/$_CONF_INSTALL_LIBRARY_PATH)
	_APPLICATION_METADATA_PATH=$_INSTALL_LIBRARY_PATH/install/.metadata
	if [ -e $_APPLICATION_METADATA_PATH ]; then
		. $_APPLICATION_METADATA_PATH
	fi
}
_application_settings() {
	_TARGET_APPLICATION_VERSION=$(git branch --no-color --show-current).$(git rev-parse HEAD)
	_TARGET_APPLICATION_BUILD_DATE=$(git log --format=%cd -1)
	_TARGET_APPLICATION_INSTALL_DATE=$(date +"%a %b %d %H:%M:%S %Y %z")
	_TARGET_APPLICATION_DATA_PATH=$_CONF_INSTALL_DATA_PATH/$_TARGET_APPLICATION_NAME
	_TARGET_APPLICATION_CONFIG_PATH="$_CONF_INSTALL_CONFIG_PATH/$_TARGET_APPLICATION_NAME"
	_TARGET_APPLICATION_METADATA_PATH=$_CONF_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME/.metadata
	_TARGET_APPLICATION_GIT_URL=$(git remote -v | awk {'print$2'} | head -1)
	mkdir -p $_CONF_INSTALL_DATA_PATH/install $_CONF_INSTALL_DATA_PATH $_TARGET_APPLICATION_DATA_PATH
	_configure $_CONF_INSTALL_CONFIG_PATH/$_TARGET_APPLICATION_NAME
}
_application_defaults() {
	local default_file
	for default_file in $(find $1/defaults -type f 2>/dev/null); do
		_configure $default_file
	done
}
_setup() {
	if [ ! -e $_CONF_INSTALL_DATA_REGISTRY_PATH/$_TARGET_APPLICATION_NAME/$_PLATFORM/$1 ]; then
		return 1
	fi
	_configure $_CONF_INSTALL_CONFIG_PATH/git
	_configure $_CONF_INSTALL_CONFIG_PATH/install
	if [ "$_TARGET_APPLICATION_NAME" != "install" ] && [ "$_TARGET_APPLICATION_NAME" != "git" ]; then
		_configure $_CONF_INSTALL_CONFIG_PATH/$_TARGET_APPLICATION_NAME
	fi
	_setup_run $1
}
_setup_run() {
	local setup_script
	for setup_script in $(find $_CONF_INSTALL_DATA_REGISTRY_PATH/$_TARGET_APPLICATION_NAME/$_PLATFORM/$1 -type f 2>/dev/null | sort -u); do
		_setup_run_script "$setup_script"
	done
}
_setup_run_script() {
	local setup_type_name=$(basename $1)
	_variable_is_set ${setup_type_name}_disabled && return
	if [ $(printf '%s' $setup_type_name | grep -c '.') -gt 0 ]; then
		setup_type_name=$(printf '%s' $setup_type_name | sed -e "s/^.*\.//")
	fi
	if [ -z "$setup_type_name" ] || [ "$setup_type_name" = "." ]; then
		_warn "setup_type_name is corrupt: $setup_type_name ($1)"
	fi
	if [ ! -e $1 ]; then
		_warn "$1 no longer exists, ignoring"
		return 0
	fi
	_setup_run_do_bootstrap $setup_type_name
	_${setup_type_name}_is_file
	if [ $? -eq 0 ]; then
		_WARN=$_CONF_INSTALL_FEATURE_TIMEOUT_ERROR_LEVEL _${setup_type_name}_install $1 || {
			local error=$?
			_warn "Error installing: $setup_type_name: $1"
			return $error
		}
		_call _${setup_type_name}_get_data $1 | _write "$_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME/type/.${setup_type_name}"
	else
		local packages=$($_CONF_INSTALL_GNU_GREP -Pv '(^$|^#)' $1 | tr '\n' ' ')
		_WARN=$_CONF_INSTALL_FEATURE_TIMEOUT_ERROR_LEVEL _${setup_type_name}_install $packages || {
			local error=$?
			_warn "Error installing $packages"
			return $error
		}
		printf "$packages" | tr ' ' '\n' | _write "$_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME/type/.${setup_type_name}"
	fi
	_call _${setup_type_name}_cleanup
	return 0
}
_setup_run_do_bootstrap() {
	_setup_type_bootstrapped $1 || {
		_call _${1}_bootstrap
		export _BOOTSTRAP_${1}=1
		printf '_BOOTSTRAP_%s=1\n' "$1" | _install_metadata_write
	}
}
_setup_type_bootstrapped() {
	_variable_is_set _BOOTSTRAP_${1}
}
_require_file() {
	if [ -z "$1" ]; then
		_error "Filename is missing ($_FILE_DETAIL_MESSAGE)"
	fi
	if [ ! -e $1 ]; then
		if [ $# -eq 2 ]; then
			_warn "File: $1 does not exist ($_FILE_DETAIL_MESSAGE)"
			return 1
		fi
		_error "File: $1 does not exist ($_FILE_DETAIL_MESSAGE)"
	fi
}
_readlink() {
	if [ $# -lt 1 ] || [ -z "$1" ]; then
		return 1
	fi
	if [ "$1" = "/" ]; then
		printf '%s\n' "$1"
		return
	fi
	if [ ! -e $1 ]; then
		if [ -z $_MKDIR ] || [ $_MKDIR -eq 1 ]; then
			local sudo
			if [ -n "$_USE_SUDO" ]; then
				sudo=$_SUDO_CMD
			fi
			$sudo mkdir -p $1 >/dev/null 2>&1
		fi
	fi
	readlink -f $1
}
_time_seconds_to_human_readable() {
	_HUMAN_READABLE_TIME=$(printf '%02d:%02d:%02d' $(($1 / 3600)) $(($1 % 3600 / 60)) $(($1 % 60)))
}
_time_human_readable_to_seconds() {
	case $1 in
	*w)
		_TIME_IN_SECONDS=${1%%w}
		_TIME_IN_SECONDS=$(($_TIME_IN_SECONDS * 3600 * 8 * 5))
		;;
	*d)
		_TIME_IN_SECONDS=${1%%d}
		_TIME_IN_SECONDS=$(($_TIME_IN_SECONDS * 3600 * 8))
		;;
	*h)
		_TIME_IN_SECONDS=${1%%h}
		_TIME_IN_SECONDS=$(($_TIME_IN_SECONDS * 3600))
		;;
	*m)
		_TIME_IN_SECONDS=${1%%m}
		_TIME_IN_SECONDS=$(($_TIME_IN_SECONDS * 60))
		;;
	*s)
		_TIME_IN_SECONDS=${1%%s}
		;;
	*)
		_error "$1 was not understood"
		;;
	esac
}
_time_decade() {
	local year=$(date +%Y)
	local _end_year=$(printf '%s' $year | head -c 4 | tail -c 1)
	local _event_decade_prefix=$(printf '%s' "$year" | $_CONF_INSTALL_GNU_GREP -Po "[0-9]{3}")
	if [ "$_end_year" -eq "0" ]; then
		_event_decade_start=${_event_decade_prefix}
		_event_decade_start=$(printf '%s' "$_event_decade_start-1" | bc)
		_event_decade_end=${_event_decade_prefix}0
	else
		_event_decade_start=$_event_decade_prefix
		_event_decade_end=$_event_decade_prefix
		_event_decade_end=$(printf '%s' "$_event_decade_end+1" | bc)
		_event_decade_end="${_event_decade_end}0"
	fi
	_event_decade_start=${_event_decade_start}1
	printf '%s-%s' "$_event_decade_start" "$_event_decade_end"
}
_current_time() {
	date +$_CONF_INSTALL_DATE_TIME_FORMAT
}
_current_time_unix_epoch() {
	date +%s
}
_timeout() {
	local timeout=$1
	shift
	local message=$1
	shift
	local timeout_units='s'
	if [ $(printf '%s' "$timeout" | grep -c '[smhd]{1}') -gt 0 ]; then
		unset timeout_units
	fi
	local timeout_level=error
	if [ $_WARN ]; then
		timeout_level=warn
	fi
	local sudo_prefix
	[ $_USE_SUDO ] && {
		[ -z "$USER" ] && USER=$(whoami)
		[ "$USER" != "root" ] && {
			sudo_prefix=$_SUDO_CMD
			[ $_PRESERVE_ENV ] && sudo_prefix="$sudo_prefix -E"
		}
	}
	$sudo_prefix timeout $_OPTIONS $timeout "$@" || {
		local error_status=$?
		local error_message="Other error"
		if [ $error_status -eq 124 ]; then
			error_message="Timed Out"
		fi
		[ $_TIMEOUT_ERR_FUNCTION ] && $_TIMEOUT_ERR_FUNCTION
		_$timeout_level "_timeout: $error_message: ${timeout}${timeout_units} - $message ($error_status): $sudo_prefix timeout $_OPTIONS $timeout $* ($USER)"
		return $error_status
	}
}
_online() {
	_WARN=1 _timeout $_CONF_INSTALL_NETWORK_TEST_TIMEOUT "Connectivity Check" curl -s $_CONF_INSTALL_NETWORK_TEST_TARGET >/dev/null 2>&1 || return 1
}
_sed_safe() {
	printf '%s' $1 | sed -e "s/\//\\\\\//g"
}
case $_DETECTED_PLATFORM in
$_PLATFORM) ;;
Darwin | FreeBSD | Linux | MINGW64_NT-*)
	_error "Please use the appropriate platform-specific installer ($_DETECTED_PLATFORM)"
	;;
*)
	_error "Unsupported platform"
	;;
esac
_APPLICATION_START_TIME=$(date +%s)
_APPLICATION_CMD=$(basename $0)
unset _DEFERS
for _ARG in "$@"; do
	case $_ARG in
	-h | --help)
		_print_help_and_exit
		;;
	-kill-all)
		_kill_all
		_success "Killed all"
		;;
	-kill-all-group)
		_kill_all_group
		_success "Killed all group"
		;;
	-kill=*)
		_kill ${_ARG#*=}
		_success "Killed ${_ARG#*=}"
		;;
	-l)
		_list
		_success "listed running processes"
		;;
	-lg)
		_list_group
		_success "listed running processes"
		;;
	-w=*)
		_WAITER_PID="${1#*=}"
		shift
		;;
	-w)
		_CONF_INSTALL_WAITER_LEVEL=_info
		_WAITEE=1
		shift
		;;
	-conf-* | -[a-z0-9][a-z0-9][a-z0-9]*)
		_configuration_name=${_ARG#*-}
		_configuration_name=${_configuration_name%%=*}
		if [ $(printf '%s' "$_configuration_name" | grep -c '_') -eq 0 ]; then
			if [ $(printf '%s' "$_configuration_name" | grep -c '^conf') -gt 0 ]; then
				_configuration_name=$(printf '%s' "$_configuration_name" | sed -e "s/-/-$_APPLICATION_NAME-/")
			else
				_configuration_name=$(printf '%s' "$_configuration_name" | sed -e "s/^/$_APPLICATION_NAME-/")
			fi
		fi
		_configuration_name=$(printf '%s' $_configuration_name | tr '-' '_' | tr '[:lower:]' '[:upper:]')
		if [ $(printf '%s' "$_ARG" | grep -c '=') -eq 0 ]; then
			_configuration_value=1
		else
			_configuration_value=${_ARG#*=}
		fi
		export _$_configuration_name="$_configuration_value"
		unset _configuration_name
		shift
		;;
	*)
		break
		;;
	esac
done
trap _on_exit INT 0 1 2 3 4 6 15
_init_logging
_init_application_context
_debug "REMAINING ARGS: $*"
_log_app_init
_init_pager
_waiter
_has_required_conf
if [ -n "$_REQUIRED_ARGUMENTS" ]; then
	_DISCOVERED_ARGUMENT_COUNT=$(printf '%s' "$_REQUIRED_ARGUMENTS" | sed -e 's/$/\n/' | tr '|' '\n' | wc -l | awk {'print$1'})
	_required_arguments_argument_log_level=debug
	_ACTUAL_ARGUMENT_COUNT=$#
	[ $_ACTUAL_ARGUMENT_COUNT -lt $_DISCOVERED_ARGUMENT_COUNT ] && _required_arguments_argument_log_level=warn
	_$_required_arguments_argument_log_level "Expecting $_DISCOVERED_ARGUMENT_COUNT, received $# arguments"
	_INDEX=1
	_ARGUMENT_LOG_LEVEL=info
	while [ $_INDEX -le $_DISCOVERED_ARGUMENT_COUNT ]; do
		_ARGUMENT_NAME=$(printf '%s' "$_REQUIRED_ARGUMENTS" | tr '|' '\n' | sed -n ${_INDEX}p | sed -e 's/:.*$//')
		_ARGUMENT_MESSAGE=$(printf '%s' "$_REQUIRED_ARGUMENTS" | tr '|' '\n' | sed -n ${_INDEX}p | sed -e 's/^.*://')
		if [ -z "$1" ]; then
			_$_required_arguments_argument_log_level "$_INDEX:$_ARGUMENT_MESSAGE was not provided"
		else
			_$_required_arguments_argument_log_level "$_INDEX:$_ARGUMENT_NAME=$1"
			export $_ARGUMENT_NAME="$1"
			shift
		fi
		_INDEX=$(($_INDEX + 1))
	done
	[ $_ACTUAL_ARGUMENT_COUNT -lt $_DISCOVERED_ARGUMENT_COUNT ] && _error "Missing arguments"
	unset _INDEX _ARGUMENT_NAME _ARGUMENT_MESSAGE _required_arguments_argument_log_level
	_DISCOVERED_REQUIRED_ARGUMENTS="$_REQUIRED_ARGUMENTS"
	unset _REQUIRED_ARGUMENTS
else
	_debug "NO _REQUIRED_ARGUMENTS args"
	unset _DISCOVERED_REQUIRED_ARGUMENTS _DISCOVERED_ARGUMENT_COUNT
fi
_APP_INSTALLATION=0
_APP_INSTALL_SELF=$(readlink -f $0)
_APPLICATION_INSTALL_DATE=$(date)
[ -z "$_INSTALL_BIN_PATH" ] && _settings_init
_online || _error "Not connected to the Internet"
if [ $# -eq 0 ]; then
	_is_app
	_TARGET_APPLICATION_NAME=$(basename $PWD)
	_info "Installing $_TARGET_APPLICATION_NAME"
	_setup_project
	exit 0
fi
_info "Installing $*"
for _TARGET_APPLICATION_NAME in "$@"; do
	_setup_project
done
